@ngdoc overview
@name Хранилища
@description

# Хранилища

Мы многое узнали о angular-translate в последних главах. Мы знаем как можно
[сделать переводы динамичными](#/guide/06_variable-replacement), изучили
[как добавить много языков](#/guide/07_multi-language). Но все же есть одна вещь, которая смотрится
глупо при использовании нашего приложения. Каждый раз, заходя в приложение, мы должны нажимать на
эту 'German' кнопку снова и снова (конечно, если вы немецкий пользователь как и я!).

Итак, проблема состоит в том, что наше приложение не может запомнить язык, который был выбран вами
при последнем посещении. Эта глава покажет как научить ваше приложение запоминать выбранный
пользователем язык.

## Запоминание языка

Для того, чтобы приложение могло запомнить выбранный пользователем язык, в angular-translate есть
поддержка **Хранилищ**. Какое бы хранилище вы не использовали, angular-translate сохранит в нем ключ
языка под специальным идентификатором, так что он сможет получить его когда пользователь в следующий
раз зайдет в приложение.

В angular-translate встроена поддержка двух видов хранилищ: **localStorage** и **cookieStorage**.
Также localStorage откатывается на cookieStorage если текущий браузер пользователя его не
поддерживает. Для использования одного из этих хранилищ вы должны установить соответствующий пакет
расширений.

## Использование cookieStorage

Если вы хотите использовать cookieStorage для хранения языка между http запросами, просто установите
расширение cookie storage при помощи bower:

```
$ bower install angular-translate-storage-cookie
```

После этого убедитесь, что вы включили его в свой HTML документ. Как только оно будет включено вы
сможете использовать метод `useCookieStorage()` `$translateProvider`'а и angular-translate
позаботится об остальном.

<pre>
$translateProvider.useCookieStorage();
</pre>

Это просто? angular-translate будет теперь хранить исходный ключ языка в этом хранилище и обновлять
его как только пользователь сменит язык.


## Использование localStorage

Если же вы по каким-либо причинам не хотите использовать cookieStorage, вы можете использовать
localStorage для достижения того же эффекта. Последовательность действий в целом остается той же.
Вы устанавливаете соответствующий пакет расширений и говорите `$translateProvider`'у использовать
localStorage при помощи метода `useLocalStorage()`. И снова angular-translate позаботится об
остальном.

Имейте в виду, что localStorage откатывается на cookieStorage если браузер не поддерживает
localStorage. Следовательно, вам нужно также предоставить и расширение cookieStorage.

Вы можете установить пакет расширений так:

```
$ bower install angular-translate-storage-local
```

Теперь, скажите `$translateProvider`'у, что вы хотите использовать его:

<pre>
$translateProvider.useLocalStorage();
</pre>

Это все. Теперь ваше приложение использует localStorage для того, чтобы запоминать язык.
Давайте также обновим наше приложение для использования localStorage:


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useLocalStorage();
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Смените язык и обновите браузер! Теперь наше приложение должно запоминать последний использованный
язык!

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
