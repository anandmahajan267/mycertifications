@ngdoc overview
@name Начало работы
@description

# Начало работы

## Стартовый HTML
Для начала работы подключите angular-translate в свой HTML документ. Конечно, это нужно сделать
**после** того, как будет подключен сам Angular. Ваш HTML должен выглядеть так:

<pre>
<html>
  <head>
    <meta charset="utf-8">
    <title>i18n app</title>

    <script src="path/to/angular.js"></script>
    <script src="path/to/angular-translate.js"></script>
    <script src="app.js"></script>
  </head>

  <body ng-app="myApp">

  </body>
</html>
</pre>

## Объявление зависимостей
После подключения вы можете объявить angular-translate в качестве зависимости для вашего приложения.
Просто замечательно, что Angular предоставляет этот механизм. Так, чтобы сказать вашему приложению,
что для правильной работы ему необходим angular-translate, внедрите его в модуль как показано ниже.
Это дает вам доступ ко всем компонентам angular-translate.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

## Знакомство с `$translateProvider`

Теперь angular-translate объявлен как зависимость, а это значит, что у нас есть доступ ко всем его
компонентам. Когда дело подходит к настройке различных сервисов, которые вы хотите использовать в
своем приложении, Angular следует довольно простой архитектуре. Просто взгляните на следующий код.

Уверен, вы уже видели что-то в этом роде:

<pre>
app.config(function ($locationProvider) {
  $locationProvider.html5Mode(true);
});
</pre>

Или, может, настройки сервиса `$route`:

<pre>
app.config(function ($routeProvider) {
  $routeProvider.when('/something', {
    templateUrl: 'url/to/template',
    controller: 'SomeFancyCtrl'
  });
});
</pre>

То, что здесь происходит, это не _использование определенных сервисов_ для настройки каких-то вещей.
Это, скорее, _настройка определенного сервиса_, который будет далее использован в вашем приложении,
при помощи _провайдера_. Это значит, что `$locationProvider.html5Mode(true)` настраивает **сервис**
`$location` для работы в режиме html5. Таким образом, если сервис может быть настроен извне, он
нуждается в соответствующем провайдере, который предоставляет необходимый для этого интерфейс.

angular-translate поставляется с провайдером `$translateProvider`, который можно использовать для
настройки сервиса `$translate`, обрабатывающего материалы i18n в вашем приложении. Сервис
`$translate` в свою очередь используется директивами и фильтрами, которые вы можете использовать в
любом месте вашего приложения. Для того, чтобы сервис `$translate` перевел контент, ему нужно знать
какие переводы вообще существуют.

Тут вступает в игру `$translateProvider`. Он предоставляет методы, позволяющие обучить ваше
приложение разным языкам и заставить сервис `$translate` использовать их.

## Обучение языку

Обучить ваше приложение языку при помощи `$translateProvider` очень просто. Для начала вы должны
внедрить провайдер в функцию настройки вашего модуля (единственное место, где вы можете получить к
нему доступ).

<pre>
app.config(['$translateProvider', function ($translateProvider) {

}]);
</pre>

Теперь, для добавления языка вы должны сделать так, чтобы `$translateProvider` узнал про **таблицу
переводов**. Что это значит? На самом деле все очень просто. angular-translate рассматривает таблицы
переводов как JSON объекты. Таким образом, все что от вас требуется - это представить информацию о
переводах в виде хеш-объекта JavaScript, или, в случае удаленной загрузки, в виде объекта JSON.
Вот пример того, как может выглядеть таблица переводов:

```json
{
  "TRANSLATION_ID": "This is a concrete translation for a specific language."
}
```

Приведенная выше таблица переводов содержит всего один перевод. Как видите, ключ представляет собой
идентификатор перевода, в то же время значение отображает конкретный перевод для некоторого языка.
Вам даже не надо указывать в таблице язык, к которому она относится. Но об этом позже.

Вы также можете организовать ваши переводы заключая их в пространства имен. Это особенно интересно
для больших сайтов с большим количеством страниц. Все, что вам нужно сделать, это создать вложенные
JSON объекты:

```json
{
  "NAMESPACE": {
    "SUB_NAMESPACE": {
       "TRANSLATION_ID1": "This is a namespaced translation."
    }
  }
}
```

Эта таблица содержит всего один перевод, но ее очень просто расширить. Вы доступны различные уровни
вложенности в вашей таблице переводов, и каждое пространство имен может включать сколько угодно
вложенных, что делает ее очень гибкой в использовании!

## Сокращения и ссылки
Сокращения и ссылки - очень полезные особенности, который доступны с версии `1.1.1`. Скажем, у нас
есть такая таблица переводов:

```json
{
  "bar": {
    "foo": {
      "foo": "This is my text."
    }
  }
}
```

Чтобы получить доступ к этому идентификатору перевода, нужно написать `bar.foo.foo`. Это хорошо, но
можно сделать лучше. angular-translate достаточно умен и понимает, когда пространство имен содержит
идентификатор перевода с таким же названием. Если это ваш случай, то для доступа к идентификатору 
можно воспользоваться сокращением - просто указать на пространство имен вместо идентификатора 
перевода. Это возможно благодаря тому, что пространство имен может содержать всего один 
идентификатор с таким же именем.

Таким образом, вы можете получить доступ к указанному выше идентификатору перевода при помощи
сокращения `bar.foo`. Правда круто?

Другой полезной особенностью angular-translate является возможность в таблице переводов ссылаться
в одном идентификаторе перевода на другой. Предположим, что у нас есть такая таблица переводов:

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "OK"
  }
}
```

Как видите, мы объявили два пространства имен, и оба они содержат текст, который просто говорит
"OK". Это не редкость, если задуматься о кнопках подтверждения или чем-то похожем в приложении.
Однако, очевидно, что такие вещи могут привести к избыточности. А мы, как разработчики, не любим 
избыточность, ведь так?

Если два идентификатора перевода всегда будут содержать одинаковый текст, можно просто сослаться
из одного идентификатора на другой. Чтобы сделать ссылку, нужно написать `@:` и полное название
идентификатора перевода, на который вы ссылаетесь, указав, в том числе, и пространство имен. Таким
образом, пример выше можно изменить так:

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "@:SOME_NAMESPACE.OK_TEXT"
  }
}
```

## Ииии, начали!

Давайте добавим таблицу переводов в наше приложение. `$translateProvider` предоставляет для этого
метод под названием `translations()`. Предположим, что у нас есть следующая таблица переводов:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  NAMESPACE: {
    PARAGRAPH: 'And it comes with awesome features!'
  }
};
</pre>

Мы можем ее добавить при помощи `$translateProvider.translations()`:

<pre>
app.config(['$translateProvider', function ($translateProvider) {
  // add translation table
  $translateProvider
    .translations('en', translations)
    .preferredLanguage('en');
}]);
</pre>

В целом, это все, что нужно сделать. Просто укажите ключ языка и добавьте для него таблицу перевода.
После этого скажите angular-translate какой язык является предпочтительным. Поскольку мы добавляем 
таблицу переводов на этапе настройки, сервис `$translate` сможет получить к ней доступ как только 
будет инициализирован и использован. Вот работающий код:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);
    </script>
    <div>
      <h1>Nothing to see here yet!</h1>
      <p>But we'll change it now</p>
    </div>
  </doc:source>
</doc:example>

Теперь ваше приложение готово к локализации! В следующей главе вы узнаете, как использовать
предоставляемые angular-translate директиву и фильтр для интерполяции ваших переводов.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
