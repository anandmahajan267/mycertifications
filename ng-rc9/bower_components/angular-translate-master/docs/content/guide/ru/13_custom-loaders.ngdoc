@ngdoc overview
@name Пользовательские загрузчики
@description

# Пользовательские загрузчики

angular-translate не был бы angular-translate, если бы не давал возможности создавать собственные
пользовательские загрузчики. В главе [Асинхронная загрузка](#/guide/10_asynchronous-loading) вы
узнали как использовать предоставленные загрузчики для асинхронной загрузки переводов с сервера,
используя определенные шаблоны.

Однако, в некоторых случаях этого недостаточно. Возможно, вы захотите использовать совершенно другое
место для хранения переводов и даже не захотите загружать их с удаленного сервера. Тут в игру
вступают пользовательские загрузчики. Вы можете создавать собственные загрузчики очень просто и
данная глава покажет, как это сделать!

## Создание пользовательского сервиса загрузки

Если ни один из предоставленных загрузчиков не удовлетворяет вашим потребностям, то вы можете
зарегистрировать пользовательский асинхронных загрузчик в виде фабрики. Она должна возвращать
функцию принимающую объект, содержащий в себе, как минимум, свойство с ключом языка. С такой
архитектурой вы максимально свободны и имеете полный контроль над поведением своего асинхронного
загрузчика.

Фабрика пользовательского загрузчика может выглядеть так:

<pre>
app.factory('customLoader', function ($http, $q) {
    // return loaderFn
    return function (options) {
        var deferred = $q.defer();
        // do something with $http, $q and key to load localization files

        var data = {
            'TEXT': 'Fooooo'
        };

        // resolve with translation data
        return deferred.resolve(data);
        // or reject with language key
        return deferred.reject(options.key);
    };
});
</pre>

Вы должны убедиться, что ваша функция-загрузчик возвращает обещание. Также, оно должно быть
разрешено (resolved) с данными перевода, или отклонено (rejected) с ключом языка. Как видите,
в объекте `options` есть свойство `key`. Оно содержит ключ языка для которого был вызван асинхронный
загрузчик.

## Использование пользовательского загрузчика

Вы знаете, что `$translateProvider` предоставляет методы вроде `useStaticFilesLoader()` или
`useUrlLoader()`. Оба они используют метод `useLoader()` для регистрации фабрики загрузчика, которая
впоследствии будет вызвана `$injector`'ом. Вы можете использовать тот же метод для своего
собственного сервиса. Таким образом, для регистрации пользовательского сервиса просто напишите:

<pre>
$translateProvider.useLoader('customLoader');
</pre>

angular-translate обратится к фабрике пользовательского загрузчика при помощи сервиса `$injector` и
сделает для вас остальное.

## Добавление дополнительных свойств

Свойство `options.key` отображает, что `options` - это просто объект. При необходимости, вы можете
расширить его дополнительными свойствами. Например, может потребоваться наличие у объекта `options`
свойства `foo`. Все, что нужно сделать в этом случае - предоставить это свойство при регистрации
фабрики пользовательского загрузчика.

Итак, если нам необходимо свойство `foo` со значением `bar`, то можно передать его так:

<pre>
$translateProvider.useLoader('customLoader', { foo: 'bar' });
</pre>

После этого, в фабрике загрузчика вы можете получить к нему доступ через `options.foo`. Не нужно
беспокоиться про `options.key`, потому что его добавляет сам angular-translate прежде, чем вызвать
загрузчик.

Чтобы показать как это работает, давайте добавим поддержку пользовательского загрузчика в наше
учебное приложение! Сначала мы создаем загрузчик:

<pre>
app.factory('asyncLoader', function ($q, $timeout) {

  return function (options) {
    var deferred = $q.defer(),
        translations;

    if (options.key === 'en') {
      translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };
    } else {
      translations = {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };
    }

    $timeout(function () {
      deferred.resolve(translations);
    }, 2000);

    return deferred.promise;
  };
});
</pre>

Но что же он делает? Он использует сервис `$timeout` для того, чтобы подождать две секунды и,
в зависимости от ключа языка, разрешает наше обещание с английской или немецкой таблицей переводов.
Теперь вызовем `$translateProvider.useLoader()` для ее использования:

<pre>
$translateProvider.useLoader('asyncLoader');
</pre>

Легко! Вот наше работающее приложение с пользовательским загрузчиком!

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.preferredLanguage('en');
        $translateProvider.useLoader('asyncLoader');
      }]);

      app.factory('asyncLoader', function ($q, $timeout) {

        return function (options) {
          var deferred = $q.defer(),
              translations;

          if (options.key === 'en') {
            translations = {
              HEADLINE: 'What an awesome module!',
              PARAGRAPH: 'Srsly!',
              PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
              PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
              PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
              VARIABLE_REPLACEMENT: 'Hi {{name}}',
              BUTTON_LANG_DE: 'German',
              BUTTON_LANG_EN: 'English'
            };
          } else {
            translations = {
              HEADLINE: 'Was für ein großartiges Modul!',
              PARAGRAPH: 'Ernsthaft!',
              PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
              PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
              PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
              VARIABLE_REPLACEMENT: 'Hi {{name}}',
              BUTTON_LANG_DE: 'Deutsch',
              BUTTON_LANG_EN: 'Englisch'
            };
          }

          $timeout(function () {
            deferred.resolve(translations);
          }, 2000);

          return deferred.promise;
        };
      });

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

При изменении языка нажатием на кнопку `German`, приложение ждет 2 секунды пока обещание не будет
разрешено с новыми данными переводов. Как вам такое?

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
