@ngdoc overview
@name Запасные языки
@description

# Запасные языки

Вы уже можете настраивать предпочитаемый язык и использовать поддержку большого количества языков.
Теперь вы можете задаться вопросом, а возможно ли обучить приложение запасному языку? Ответ - 
**да**.

## Регистрация запасного языка

Обучить ваше приложение запасному языку так же просто, как вызвать метод `$translateProvider`а. Да,
звучит слишком просто, но это действительно так. Скажем, у нас есть приложение и мы регистрируем
таблицу переводов для немецкого языка.

<pre>
$translateProvider
  .translations('de', { /* ... */ });
</pre>

Теперь, представим, что существуют такие идентификаторы перевода, которые **доступны** в английской
таблице переводов, но отсутствуют в немецкой. angular-translate в общем случае будет возвращать
данный идентификатор перевода, если он не может найти для него перевода в таблице переводов. Но,
если вы указали запасной язык, который включает данный идентификатор перевода, angular-translate
вернет этот перевод.

Итак, давайте сделаем английский запасным языком для нашего приложения. Правда, для начала нам нужно
добавить сам язык.

<pre>
$translateProvider
  .translations('de', { /* ... */ })
  .translations('en', { /* ... */ });
</pre>

Теперь мы говорим angular-translate использовать английский язык в качестве запасного.

<pre>
$translateProvider
  .translations('de', { /* ... */ })
  .translations('en', { /* ... */ })
  .fallbackLanguage('en');
</pre>

Вот так. Теперь, если идентификатор перевода отсутствует в немецкой таблице переводов,
angular-translate попытается найти его в английской. Правда легко?

## Регистрация стека запасных языков

А что если у вас есть множество запасных языков? angular-translate может работать с ними тоже! Вам
достаточно указать запасной язык как массив:

<pre>
$translateProvider
  .translations('de', { /* ... */ })
  .translations('en', { /* ... */ })
  .translations('fr', { /* ... */ })
  .fallbackLanguage(['en', 'fr']);
</pre>

Теперь, если angular-translate не сможет найти ваш идентификатор перевода в таблице переводов для
английского языка (который является первым запасным языком), он будет проходить по остальным 
указанным запасным языкам и смотреть там. Это билет в один конец, тоесть, в данном случае, итерация
начинается с `en` и проходит до `fr`. Вы можете указать столько запасных языков, сколько захотите.

## Смена запасного языка во время выполнения

Ах да, даже **такое** возможно! Бывают случаи, когда вам может понадобиться сменить ваш запасной
язык во время выполнения. Или даже весь стек запасных языков! Например, представьте случай, когда вы
указываете немецкий предпочитаемым языком и хотите убедиться, что английский является запасным. Без
проблем, мы уже умеем такое делать. Теперь, представьте, что язык приложения переключен на
английский и вы хотите использовать французский в качестве запасного, но английский уже указан в
качестве запасного языка.

Вы можете сменить запасной язык во время выполнения при помощи `fallbackLanguage()` метода сервиса
`$translate`. Вот как это может выглядеть:

<pre>
$scope.changeLanguage = function (langKey) {
  if (langKey === 'en') {
    $translate.fallbackLanguage('fr');
  } else if (langKey == 'de') {
    $translate.fallbackLanguage('en');
  }
  $translate.use(langKey);
};
</pre>

Не забудьте, что ключ запасного языка является отправной точкой для просмотра запасных языков. Если
ваш запасной язык задан как `en, fr, de` и вы меняете запасной язык на `fr`, то в случае отсутствия
идентификатора перевода, angular-translate будет искать запасной перевод только в `de`.

## Смена всего стека запасных языков во время выполнения

Аналогично предыдущему примеру вы можете сделать так:

<pre>
$scope.changeLanguage = function (langKey) {
  $translate.fallbackLanguage(['de', 'en', 'fr']);
  $translate.use(langKey);
};
</pre>

При смене всего стека запасных языков вы также меняете порядок, в котором angular-translate их
просматривает. Так, собственно, процесс просмотра остается таким же, но вы меняете порядок просмотра
запасных языков.

## Ограничение просмотра запасных языков

Дополнительной возможностью при просмотре стека запасных языков является ограничение языков, которые
необходимо просматривать на наличие ключей перевода. В некоторых случаях когда пользователь хочет
просматривать только часть доступных запасных языков без удаления некоторых уже объявленных или
загруженных языков. Это тоже возможно!
Как указано выше, просмотр стека запасных языков происходит 'слева на право'. Так, если мы хотим
начать просмотр после 'de' в стеке 'de, en, fr', мы должны определить начальную точку просмотра
при помощи метода 'useFallbackLanguage()'.

<pre>
  // langKey is 'en'
  $scope.changeLanguage = function (langKey) {
  $translate.fallbackLanguage(['de', 'en', 'fr']);
  $translate.useFallbackLanguage(langKey);
};
</pre>

С этого момента все переводы на 'de' будут игнорироваться и пропускаться.
Важное замечание: Если игнорируемый язык является предпочитаемым или текущим, перевод на этот язык
будет происходить даже если он должен быть пропущен!
<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
