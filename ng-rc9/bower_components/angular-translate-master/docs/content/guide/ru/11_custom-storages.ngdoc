@ngdoc overview
@name Пользовательские хранилища
@description

# Пользовательские хранилища

Если вы читали главу [Хранилища](#/guide/10_storages), то знаете как использовать cookiesStorage
и localStorage для того, чтобы дать возможность вашему приложению запоминать последний выбранный
язык между http запросами. Если оба localStorage и cookieStorage вам не подходят, запросто можно
создать собственный сервис хранилища и использовать его вместо них.

## Создание пользовательского хранилища

Если вы хотите использовать свое собственное хранилище в вашем приложении, вам необходимо создать
сервис реализующий определенные методы, чтобы angular-translate смог его использовать. Интерфейс для
сервиса хранилища предельно прост - он должен предоставить методы `put()` и `get()`.

Давайте предположим, что мы хотим использовать пользовательский сервис хранилища в нашем приложении.
Мы легко можем расширить его новым сервисом. Нам нужно убедиться, что мы возвращаем объект с
методами `get()` и `put()`. Пользовательский сервис может выглядеть как-то так:

<pre>
app.factory('customStorage', function () {
  return {
    put: function (name, value) {
      // store `value` under `name` somehow
    },
    get: function (name) {
      // request value of `name` somehow
    }
  };
});
</pre>

Правда легко? Как видите, `put()` принимает два аргумента. Имя и значение. Таким образом, работа
идет с простыми парами ключ-значение. С другой стороны, `get()` нуждается только в имени для запроса
значения. Предоставление пользовательского хранилища в качестве отдельного сервиса дает вам большую
гибкость когда речь идет об использовании этого сервиса в другом месте. В дополнение к этому, такой
сервис легко тестировать, потому что он изолирован.

## Использование пользовательского хранилища

Когда вы создали пользовательское хранилище, скажите angular-translate, что он должен использовать
его. Методы `useCookieStorage()` и `useLocalStorage()` на самом деле являются сокращениями. Внутри
оба они используют метод `useStorage()`. Вы также можете использовать этот метод, чтобы дать знать
angular-translate про ваш пользовательский сервис просто написав:

<pre>
$translateProvider.useStorage('customStorage');
</pre>

angular-translate использует `$injector` для получения экземпляра фабрики, название которой было
передано (в нашем случае это `customStorage`), и, впоследствии, может использовать ее методы во
время выполнения для сохранения последнего выбранного языка.


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useStorage('customStorage');
      }]);

      app.factory('customStorage', function () {
        return {
          put: function (name, value) {
            // store `value` under `name` somehow
          },
          get: function (name) {
            // request value of `name` somehow
          }
        };
      });

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Конечно, наш пользовательский сервис ничего не делает, из-за чего вы можете перезагружать браузер
так часто, как вы того пожелаете, но приложение не запомнит язык.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
