@ngdoc overview
@name Асинхронная загрузка
@description

# Асинхронная загрузка

Окей, разные переводы для разных языков - это круто. Но еще лучше, иметь возможность загрузки
переводов асинхронно, правда? У `angular-translate` есть несколько весьма клевых расширений для
поддержки асинхронной и отложенной загрузки данных переводов. И это работает как часы.

## Асинхронные загрузчики
angular-translate предоставляет довольно хитрый способ, чтобы сказать сервису $translate загрузить
данные асинхронно. Для загрузки данных с сервера вам необходимо использовать асинхронный загрузчик,
который будет вызван позже во время выполнения, когда это будет необходимо. angular-translate
поставляется с поддержкой трех разных асинхронных загрузчиков. Любой из них можно установить с
помощью Bower. Давайте на них посмотрим!

## Использование urlLoader
Это, возможно, простейший способ загрузки данных перевода асинхронно. Все, что для этого нужно - это
установить расширение `angular-translate-loader-url` при помощи Bower:

```
$ bower install angular-translate-loader-url
```

Когда оно установится, убедитесь, что включили его в свой HTML документ. Хорошо, загрузчик доступен
и мы должны сказать angular-translate использовать его. `$translateProvider` предоставляет метод под
названием `useUrlLoader()`. Очень просто, да? `useUrlLoader()` принимает аргумент, который описывает
конечную точку на сервере, которая вернет в ответ данные перевода.

В добавок, при использовании асинхронных загрузчиков мы должны использовать
`$translateProvider.preferredLanguage()` для указания angular-translate языка, для которого нужно
загрузить перевод.

<pre>
$translateProvider.useUrlLoader('foo/bar.json');
$translateProvider.preferredLanguage('en');
</pre>

Итак, что тут происходит? angular-translate использует расширение для преобразования данной строки
в реальную функцию-загрузчик, которая может быть вызвана позже во время выполнения, как только будет
создан экземпляр сервиса `$translate`. В добавок к этому, указание angular-translate использовать
ключ языка 'en', добавляет его в качестве параметра запроса к переданной строке загрузчика.

Таким образом, пример выше на самом деле запрашивает `foo/bar.json?lang=en`. angular-translate также
обратит внимание если нет никаких доступных данных переводов при запуске и автоматически вызовет
загрузчик как можно раньше.

## Использование staticFilesLoader

В случае, если у вас нет URL который ожидает параметра `lang` чтобы вернуть JSON, содержащий ваши
переводы, но есть несколько файлов локализации, которые подпадают под какой-то шаблон, то вам,
вероятно, нужно использовать расширение `angular-translate-loader-static-files`, которое описывает
шаблон ваших файлов локализации.

Как и urlLoader, вы можете установить расширение staticFilesLoader при помощи Bower:
```
$ bower install angular-translate-loader-static-files
```

Когда пакет установлен и подключен, вы можете вызвать `useStaticFilesLoader()` метод
`$translateProvider`'а, чтобы сказать angular-translate, что нужно использовать его. Загрузчик
статичных файлов работает немного иначе. Вместо того, чтобы иметь фиксированный URL, который
нуждается только в параметре `lang`, вы теперь можете иметь различные файлы локализации, которые
подходят под определенный шаблон.

То, как выглядит этот шаблон, зависит от ваших потребностей. Для указания шаблона требуется
следующая информация:

* **prefix** - указывает префикс названия файла
* **suffix** - указывает суффикс названия файла

Скажем, у вас есть два файла локализации `locale-de.json` и `locale-en.json`. Вы легко можете
использовать загрузчик следующим образом:

<pre>
$translateProvider.useStaticFilesLoader({
    prefix: 'locale-',
    suffix: '.json'
});
$translateProvider.preferredLanguage('en');
</pre>

Кроме того, если у вас есть несколько файлов с переводами, которые находятся в разных местах, то
можно предоставить загрузчику массив файлов:

<pre>
$translateProvider.useStaticFilesLoader({
    files: [{
        prefix: 'locale-',
        suffix: '.json'
    }, {
        prefix: '/absolute/path/to/locale-',
        suffix: '.json'
    }, {
        prefix: 'another/path/to/locales/',
        suffix: ''
    }]
});
$translateProvider.preferredLanguage('en');
</pre>

angular-translate объединит переданную информацию в `{{prefix}}{{langKey}}{{suffix}}`. Таким образом
будет загружен `locale-en.json`. И снова, так как еще нет никаких доступных данных переводов,
angular-translate загрузит его автоматически как можно раньше.

## Использование partialLoader
Работая с достаточно большим и сложным приложением, его обычно разделяют на несколько подмодулей.
Например, у вас может быть модуль `mainApp` который зависит от модулей `home` и `contact`. Это
всего 2 подмодуля, но теперь представьте, что ваше приложение действительно большое и состоит из
10 или 20 подмодулей!

В такого рода приложениях, примерно, 13 из 20 подмодулей никогда не выполняются просто потому, что
пользователь туда не заходит. Переводя контент такого приложения, когда, возможно, около 50%
приложения используется время от времени, не очень круто загружать все данные перевода для всего
приложения, просто на другом языке.

Нам нужен способ загружать данные перевода для определенного модуля, который работает в данный
момент. Это значит, что при обращении к подмодулю `home`, мы хотим загрузить перевод только для
модуля `home`. Если мы меняем язык, мы также хотим загрузить перевод только для модуля `home`.

В дополнение к этому, если мы загрузили данные перевода для, скажем, трех различных модулей, сменили
язык, и потом снова вернули язык на уже загруженный, нам не хочется загружать данные снова потому,
что мы их уже загружали раньше.

Да, это то, о чем необходимо позаботиться, если нам нужна загрузка по частям. Тем не менее,
`angular-translate` предусмотрел это. Тут в игру вступает `partialLoader`.

Вы можете установить его как и любой другой загрузчик просто используя Bower:

```
$ bower install angular-translate-loader-partial
```

Используя `partialLoader` вам нужно подумать о шаблоне, который `angular-translate` будет
использовать для загрузки переводов. Это похоже на `staticFilesLoader`, но немного более специфично.
Вам необходимо указать свойства `part` и `lang`, где `part` означает часть вашего приложения
(к примеру, `home`), и `lang` - ключ нужного языка.

Давайте предположим, что мы структурировали наши файлы переводов по модулям и они выглядят так:

```
/i18n/home/en.json
/i18n/home/de.json
/i18n/contact/en.json
/i18n/contact/de.json
```

Вполне логично, да? Теперь, когда мы знаем как структурированы наши данные, мы можем настроить
`$translateProvider` для использования загрузчика с этим шаблоном:

<pre>
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json'
});
</pre>

Практически готово! Конечно, `angular-translate` должен знать какой язык использовать, поэтому мы
добавим следующее:

<pre>
$translateProvider.preferredLanguage('en');
</pre>

В принципе, ничего нового. Далее, как `angular-translate` узнает какую "часть" загружать? Если
кратко - никак. Вам нужно сказать `angular-translate` **когда** нужно загружать **какую часть**.

У `partialLoader` есть `провайдер`, который предназначен для настройки начального состояния
загрузчика. Для использования этого провайдера нам нужно внедрить его в функцию настройки:

<pre>
angular.module('main')
.config(function ($translateProvider, $translatePartialLoaderProvider) {

});
</pre>

Отлично. Теперь, чтобы сказать `angular-translate`, какую часть он должен загрузить, мы используем
`addPart()` метод `$translaterPartialLoaderProvider`'а. Это выглядит примерно так:

<pre>
$translatePartialLoaderProvider.addPart('home');
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json'
});
$translateProvider.preferredLanguage('en');
</pre>

Как видите, вся функциональность для загрузки переводов по частям находится в загрузчике, а не в
самом `angular-translate`. Теперь шаблон завершен и `angular-translate` вызовет загрузчик как только
это станет возможно.

Хорошо, это процесс инициализации, но как на счет времени выполнения? Что если пользователь зашел в
модуль `contact` и хочет загрузить перевод для этого модуля?

`$translatePartialLoaderProvider` настраивает `$translatePartialLoader`, а, значит, вы можете
внедрить `$translatePartialLoader` в ваши контроллеры и сервисы. Но зачем это нужно? Так как вы
можете добавить часть перевода в загрузчик при помощи провайдера, вы можете сделать это и при помощи
сервиса для манипулирования состоянием загрузчика во время выполнения. Это значит, что вы можете
просто внедрить загрузчик и использовать его для добавления дополнительных частей перевода.

Скажем, в нашем модуле `contact` есть `ContactCtrl`, тогда это может выглядеть следующим образом:

<pre>
angular.module('contact')
.controller('ContactCtrl', function ($scope, $translatePartialLoader) {
  $translatePartialLoader.addPart('contact');
});
</pre>

Это не трудно, так? Тут мы манипулируем состоянием загрузчика во время выполнения. Это гарантирует,
что angular-translate загрузит специфические данные перевода тогда, когда мы этого действительно
захотим. Как только мы добавили новую часть, `$translatePartialLoader` вызовет событие
`$translatePartialLoaderStructureChanged`.

К этому моменту никаких дополнительных данных загружено не было! `angular-translate` ничего не знает
про состояние загрузчика, поэтому вам необходимо сказать `angular-translate` **обновить** таблицы
переводов. Обновление таблиц перевода удаляет и заново загружает их. По сути, все что вам нужно
для загрузки по частям - это манипулировать состоянием загрузчика говоря какие части добавить и
потом обновлять таблицы перевода. При изменении состояния загрузчика, новые части будут загружены
при его следующем вызове.

Итак, нам просто нужно добавить:

<pre>
angular.module('contact')
.controller('ContactCtrl', function ($scope, $translatePartialLoader, $translate) {
  $translatePartialLoader.addPart('contact');
  $translate.refresh();
});
</pre>

Для автоматизации процесса вы можете использовать событие `$translatePartialLoaderStructureChanged`.
Просто прослушивайте его при помощи `$rootScope` и обновляйте таблицы перевода каждый раз, когда
оно вызывается.

<pre>
app.run(function ($rootScope, $translate) {
  $rootScope.$on('$translatePartialLoaderStructureChanged', function () {
    $translate.refresh();
  });
});
</pre>

Так как `$translate.refresh()` возвращает обещание, это отлично работает как с модулем `ngRoute`,
так и с UI Router.

Интересным является вопрос борьбы с ошибками загрузки. По умолчанию загрузчик отвергает весь
процесс загрузки, если любая из частей не была загружена с сервера. Но вы можете немного изменить
это поведение. Загрузчик позволяет указать обработчик ошибок - сервис, который будет вызываться,
если какая-либо часть не может быть загружена. В данном сервисе вы можете делать все, чтобы
обрабатывать такие ситуации.

Есть несколько вещей, которые вы должны знать, прежде чем вы сможете создать ваш первый обработчик
ошибок:

1) Загрузчик рассчитывает, что обработчик ошибок имеет следующую сигнатуру
`function (part:String, langKey:String):Promise`
2) Вы должны либо разрешить обещание с таблицей перевода для данных части и языка или отклонить его
3) Загрузчик будет использовать данную таблицу перевода так же, как если бы она была успешно
получена с сервера
4) Если вы отвергнете обещание, то загрузчик отвергнет весь процесс загрузки

Вот пример простого обработчика ошибок:

```js
angular.module('translation')
.factory('MyErrorHandler', function ($q, $log) {
  return function (part, lang) {
    $log.error('The "' + part + '/' + lang + '" part was not loaded.');
    return $q.when({});
  };
});
```

Итак, теперь все, что мы должны сделать, это сказать загрузчику название сервиса, который он должен
использовать в качестве обработчика ошибок:

<pre>
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json',
  loadFailureHandler: 'MyErrorHandler'
});
</pre>

## Отложенная загрузка во время выполнения

Как только ваше приложение загрузится, то оно асинхронно загрузит необходимые данные переводов.
Окей, круто. Но что, если пользователь хочет изменить язык, а соответствующие данные переводов еще
не загружены?

В главе [Многоязычность](#/guide/07_multi-language) вы узнали как можно менять язык во время
выполнения при помощи `$translate.use()`. Знаете что? Использование асинхронных загрузчиков ничего
не меняет. `$translate.use()` проверяет присутствует ли таблица переводов для данного ключа языка,
и если нет, будет вызван зарегистрированный загрузчик для ее получения. Отложенная загрузка в
лучшем виде!

**Внимание**: Заметьте, что при использовании `partialLoader` вам нужно сперва обновить таблицы
перевода!

## Настройка загрузчика

В каждый загрузчик могут быть переданы настройки. Для этого используется такой синтаксис:

<pre>
$translateProvider.useLoader('customLoader', {
  settingA: 'foobar'
});
$translateProvider.useStaticFilesLoader({
  $http: {
    method: 'POST'
  }
});
</pre>

Свойство `$http` будет использовано загрузчиками при запросе, однако атрибут `cache` может быть
переопределен (см. следующий раздел).

## Использование кэша

Для контроля над кэшированием в существующих загрузчиках можно использовать объект cache. Более
подробно об этом Вы можете прочитать в
[официальной документации AngularJS](https://docs.angularjs.org/api/ng/type/$cacheFactory.Cache).

Для включения стандартного кэширования используйте следующий метод:

<pre>
$translateProvider.useLoaderCache(true); // default is false which means disable
</pre>

Если же у Вас уже есть экземпляр кэша (специально настроенный), то привяжите его так:

<pre>
$translateProvider.useLoaderCache(yourSpecialCacheService);
</pre>

Angular-Translate также поддерживает ленивое связывание. Поэтому, такой вариант тоже будет работать:

<pre>
$translateProvider.useLoaderCache('yourSpecialCacheService');
</pre>

Экземпляр под названием `yourspecialCacheService` будет найден при необходимости.

## МНПК - Мигание не переведенного контента

В использовании асинхронных загрузчиков для получения переводов есть один недостаток. При запуске
приложения есть небольшой промежуток времени, когда возможно мерцание из-за того, что данные
переводов еще не загружены. Это не баг angular-translate, а, скорее, вполне логичное поведение
поскольку мы выполняем действия асинхронно.

Чтобы обойти это, вы можете определить хотя бы один язык **в** приложении, без необходимости
загружать его асинхронно. Если ваше приложение использует этот определенный заранее язык по
умолчанию, то при использовании `$translateProvider.preferredLanguage()` МНПК проявляться не будет,
потому что используемый язык  уже присутствует.

Просто используйте комбинацию из `$translateProvider.translations()` и
`$translateProvider.{{какой-нибудь}}Loader` вот так:

<pre>
$translateProvider.translations('en', {
    'HELLO_TEXT': 'Hello World!'
});
$translateProvider.useStaticFilesLoader({
    'prefix': 'locale-',
    'suffix': '.json'
});
$translateProvider.preferredLanguage('en');
</pre>

**Заметка:** Пользователь Angular-Translate поделился хорошим решением этой проблемы
[при помощи Grunt](https://github.com/angular-translate/angular-translate/issues/921).

Давайте обновим наше учебное приложение таким образом, чтобы использовать асинхронный загрузчик!
Воспользуемся staticFilesLoader. Для начала, мы должны изъять таблицы переводов из кода и поместить
их в отдельные файлы:

**Заметка:** Теперь данные представлены в виде _JSON_, так что все должно быть заключено в двойные
кавычки! Также, убедитесь, что вы НЕ скопировали комментарии и настроили сервер на отправку JSON как
JSON, а не как обычный текст!

<pre>
// locale-en.json
{
  "HEADLINE": "What an awesome module!",
  "PARAGRAPH": "Srsly!",
  "PASSED_AS_TEXT": "Hey there! I'm passed as text value!",
  "PASSED_AS_ATTRIBUTE": "I'm passed as attribute value, cool ha?",
  "PASSED_AS_INTERPOLATION": "Beginners! I'm interpolated!",
  "VARIABLE_REPLACEMENT": "Hi {{name}}",
  "BUTTON_LANG_DE": "German",
  "BUTTON_LANG_EN": "English"
}
</pre>

<pre>
// locale-de.json
{
  "HEADLINE": "Was für ein großartiges Modul!",
  "PARAGRAPH": "Ernsthaft!",
  "PASSED_AS_TEXT": "Hey! Ich wurde als text übergeben!",
  "PASSED_AS_ATTRIBUTE": "Ich wurde als Attribut übergeben, cool oder?",
  "PASSED_AS_INTERPOLATION": "Anfänger! Ich bin interpoliert!",
  "VARIABLE_REPLACEMENT": "Hi {{name}}",
  "BUTTON_LANG_DE": "deutsch",
  "BUTTON_LANG_EN": "englisch"
}
</pre>

Дальше при помощи `$translateProvider` мы настраиваем сервис `$translate`:

<pre>
// configures staticFilesLoader
$translateProvider.useStaticFilesLoader({
  prefix: 'data/locale-',
  suffix: '.json'
});
// load 'en' table on startup
$translateProvider.preferredLanguage('en');
$translateProvider.useLocalStorage();
</pre>

Поскольку нам не нужно вносить изменения в контроллеры или HTML, все готово! Посмотрите на
работающее приложение:

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', {
          "HEADLINE": "What an awesome module!",
          "PARAGRAPH": "Srsly!",
          "PASSED_AS_TEXT": "Hey there! I'm passed as text value!",
          "PASSED_AS_ATTRIBUTE": "I'm passed as attribute value, cool ha?",
          "PASSED_AS_INTERPOLATION": "Beginners! I'm interpolated!",
          "VARIABLE_REPLACEMENT": "Hi {{name}}",
          "BUTTON_LANG_DE": "German",
          "BUTTON_LANG_EN": "English"
        });
        // configures staticFilesLoader
        $translateProvider.useStaticFilesLoader({
          prefix: 'data/locale-',
          suffix: '.json'
        });
        // load 'en' table on startup
        $translateProvider.preferredLanguage('en');
        $translateProvider.useLocalStorage();
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Откройте инструменты разработчика вашего браузера и посмотрите на сетевую активность при смене
языка. Теперь наше приложение загружает данные переводов асинхронно! В следующей главе вы узнаете
как создавать **ваши собственные пользовательские загрузчики**.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
