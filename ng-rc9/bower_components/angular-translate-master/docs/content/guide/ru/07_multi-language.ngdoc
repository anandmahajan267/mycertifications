@ngdoc overview
@name Многоязычность
@description

# Многоязычность

В главе [Подстановка переменных](#/guide/06_variable-replacement) вы изучили как передать
динамические значения через различные компоненты для использования их в переводах. Поскольку мы
покрыли всю базовую функциональность предоставляемую этими компонентами (используя стандартный
сервис интерполяции), теперь мы готовы перейти на следующий уровень: **поддержка многоязычности**.

Конечно, очень клево знать как использовать компоненты angular-translate, но все становится куда
интереснее когда необходимо обучить приложение нескольким языкам (собственно, для чего этот модуль и
предназначен!). Итак, давайте же начнем изучать как добавлять сразу несколько таблиц переводов!

## Обучение приложения новым языкам

В главе [Начало работы](#/guide/02_getting-started) вы узнали как добавить в приложение таблицу
перевода используя метод `translations()` `$translateProvider`'а. Тот же метод можно использовать
для одновременного добавления большего количества таблиц перевода. Передаваемые таблицы перевода
должны при этом сопровождаться ключом языка (language key) с помощью которого angular-translate
различает, какая таблица переводов относится к какому языку.

Добавить таблицу перевода с соответствующим ключом очень просто. Вместо того, чтобы просто отдать
таблицу в метод `translations()`, можно первым аргументом передать ключ языка, а таблицу перевода -
вторым. Таким образом, добавление таблицы перевода с ключом языка выглядит так:

<pre>
// registers translation table with language key 'en'
$translateProvider.translations('en', {
  GREETING: 'Hello world!'
});
</pre>

Теперь, для добавления второй таблицы переводов для другого языка (скажем, немецкого), сделайте
то же самое с другим ключом языка:

<pre>
// registers translation table with language key 'de'
$translateProvider.translations('de', {
  GREETING: 'Hallo Welt!'
});
</pre>

Легко? Ваше приложение теперь знает два разных языка. Вы можете добавлять столько языков, сколько
нужно - лимита нет. Однако, поскольку теперь доступно два языка, какой язык должно использовать
приложение? angular-translate не отдаст предпочтения какому-либо языку пока вы не скажете ему это
сделать.

## Выбор языка для использования

Поскольку мы зарегистрировали более одной таблицы переводов, `angular-translate` должен знать какую
из них нужно использовать. Тут вступает в игру новый метод провайдера `$translateProvider`.
`preferredLanguage()` говорит angular-translate какой из зарегистрированных языков должен быть
использован по умолчанию. Он принимает ключ языка, который указывает на определенную таблицу
переводов. Таким образом, чтобы сказать приложению, что оно должно использовать немецкий, а не
английский в качестве первого языка, расширьте код следующим образом:

<pre>
// tells angular-translate to use the German language
$translateProvider.preferredLanguage('de');
</pre>

**Заметка:** Также для этого можно использовать метод `$translateProvider.use()`, поскольку он тоже
устанавливает язык. Однако оказалось, что это плохая практика при использовании асинхронных
загрузчиков в комбинации с хранилищем. В некоторых случаях может получиться так, что
angular-translate сделает два асинхронных запроса. Позже вы ознакомитесь с этим более детально.
Чтобы обойти эту проблему мы ввели `preferredLanguage()`. Вам следует всегда использовать
`preferredLanguage()` вместо `use()` при работе с `$translateProvider`.

## Автоматическое определение предпочитаемого языка

Начиная с версии `2.0` `$translateProvider` имеет метод `determinePreferredLanguage()`. Этот метод
пытается самостоятельно определить предпочитаемый язык. Он ищет значения в следующих свойствах
объекта `window.navigator` (в соответствующем порядке):

- `navigator.languages[0]`
- `navigator.language`
- `navigator.browserLanguage`
- `navigator.systemLanguage`
- `navigator.userLanguage`

Таким образом, вместо вызова `$translateProvider.preferredLanguage(langKey)`, вы можете сделать так:

<pre>
// try to find out preferred language by yourself
$translateProvider.determinePreferredLanguage();
</pre>

Пожалуйста, используйте этот метод на ваш собственный страх и риск! Знайте, что каждый браузер может
вернуть разные значения этих свойств.

Если это не удовлетворяет ваших нужд, вы можете дополнительно передать функцию, которая определяет
ключ предпочитаемого языка.

<pre>
$translateProvider.determinePreferredLanguage(function () {
  var preferredLangKey = '';
  // some custom logic's going on in here
  return preferredLangKey;
});
</pre>

## Смена языка во время выполнения

Для смены языка во время выполнения, сервис `$translate` имеет метод `use()` который или возвращает
ключ языка, который используется в данный момент, или, в случае передачи в качестве аргумента ключа
языка, говорит angular-translate использовать соответствующий язык. `$translate.use()` внутри также
вызывает асинхронные загрузчики, при попытке использования языка для которого еще не загружена
таблица переводов. Но подробнее об этом в главе
[Асинхронная загрузка](#/guide/10_asynchronous_loading).

Хорошим использование `$translate.use()` было бы в контроллере, который управляет сменой языка.
Вам просто нужно реализовать принимающую ключ языка функцию в области видимости и использовать ее
для того, чтобы сменить язык.

<pre>
angular.module('myApp').controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };

}]);
</pre>

Чтобы почувствовать как это будет работать в приложении, мы обновим наш пример соответствующим
образом. Во-первых, мы добавим таблицу переводов для немецкого языка и два новых идентификатора
переводов для кнопок, которые будут добавлены позже:

<pre>
var translationsEN = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'German',
  BUTTON_LANG_EN: 'English'
};

var translationsDE= {
  HEADLINE: 'Was für ein großartiges Modul!',
  PARAGRAPH: 'Ernsthaft!',
  PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
  PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
  PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'Deutsch',
  BUTTON_LANG_EN: 'Englisch'
};
</pre>

После этого мы обновим добавление английской таблицы переводов указав соответствующий ключ языка и
скажем angular-translate использовать английский по умолчанию:

<pre>
$translateProvider.translations('en', translationsEN);
$translateProvider.translations('de', translationsDE);
$translateProvider.preferredLanguage('en');
</pre>

Круто! Теперь нам нужны элементы управления для смены языка во время выполнения. Мы обновим наш HTML
и добавим кнопку для каждого языка. Так же, для каждой кнопки мы используем директиву `ng-click`
которая вызывает функцию смены языка:

<pre>
<button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
<button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
</pre>


Наконец, мы должны реализовать соответствующую функцию в области видимости нашего контроллера:

<pre>
app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };
}]);
</pre>

Вуаля! Теперь у нас есть приложение, поддерживающее много языков:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        MISSING_TRANSLATION: 'Oops! I have not been translated into German...',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        // MISSING_TRANSLATION is ... missing :)
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        $translateProvider.fallbackLanguage('en');
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
      <p translate>MISSING_TRANSLATION</p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
