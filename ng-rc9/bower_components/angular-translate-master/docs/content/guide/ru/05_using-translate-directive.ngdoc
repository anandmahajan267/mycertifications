@ngdoc overview
@name Директива translate
@description

# Директива translate

Другим способом перевода контента в слое представления является использование директивы `translate`.
Использование фильтра, конечно, замечательно, но директива - лучше. Оказалось, что наличие большого
количества фильтров в представлении приводит к большому количеству наблюдающих выражений (watch
expressions). Поэтому, `angular-translate` также предоставляет директиву для перевода контента в
слое представления.

## Использование
Вы можете использовать директиву `translate` разными способами. Вот как выглядит обычное
использование:

```
<ANY translate>TRANSLATION_ID</ANY>
```

Вы также можете передать идентификатор перевода в качестве значения атрибута директивы `translate`:

```
<ANY translate="TRANSLATION_ID"></ANY>
```

Даже если это уже очень гибкий способ использования директивы, angular-translate предлагает
**другой** способ ее использования. Давайте предположим, что идентификатор перевода не доступен в
качестве конкретного идентификатора потому, что, например, он расположен внутри цикла по набору
данных, который содержит идентификатор перевода в каждом итераторе. В таком случае идентификатор
перевода доступен только в качестве динамических данных. Фактически, сначала нужно интерполировать
непосредственно сам идентификатор. angular-translate поможет вам в этом. Так тоже можно:

```
<ANY translate="{{toBeInterpolated}}"></ANY>
```

Ну разве это не круто? И да, angular-translate не был бы angular-translate, если бы не мог проделать
тоже самое с нашим первым примером использования. Это тоже работает:

```
<ANY translate>{{toBeInterpolated}}</ANY>
```

Выберите, что лучше для вас!

## Пост компиляция
Начиная с версии 2, к переводам может применяться пост обработка в контексте текущей области
видимости (с использованием `$compile`). Это означает, что любая директива, используемая в тексте
перевода теперь будет работать как ожидается.

Это поведение можно включить для директивы:

```
<ANY translate="TRANSLATION_ID" translate-compile></ANY>
```

Также, вы можете включить эту функцию глобально при помощи...

```
$translateProvider.usePostCompiling(true);
```

... и потом выключить ее снова для директивы:

```
<ANY translate="TRANSLATION_ID" translate-compile="false"></ANY>
```

## Пример

Давайте обновим наше учебное приложение и добавим некоторые новые переводы. Как на счет текстов,
которые представляют все возможные варианты использования директивы `translate`? Наша таблица
переводов может выглядеть примерно так:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!'
};
</pre>

После этого мы обновим наше представление, добавив в него новые идентификаторы переводов:

<pre>
<h2>{{ 'HEADLINE' | translate }}</h2>
<p>{{ 'PARAGRAPH' | translate }}</p>

<p translate>PASSED_AS_TEXT</p>
<p translate="PASSED_AS_ATTRIBUTE"></p>
<p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
<p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
</pre>

Теперь новая версия нашего приложения выглядит так:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
