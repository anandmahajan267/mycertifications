@ngdoc overview
@name Концептуальный обзор
@description

# Концептуальный обзор

На следующем рисунке абстрактно отображена структура модуля angular-translate и связи между
его компонентами.

<img class="pull-right" style="padding-left: 3em;" src="img/guide/conceptual_overview.png">

## Подробности
В качестве компонентов для перевода контента приложения angular-translate предоставляет директиву и 
фильтр. Директива, в целом, является надстройкой над фильтром, так как использует его для работы.

Дальше становится интереснее. Оба, директива и фильтр используют сервис `$translate`. Это значит, 
что когда вы переводите контент вашего приложения при помощи директивы, то на самом деле делаете это
через фильтр, который в свою очередь использует сервис. Таким образом, контент можно переводить не 
только в представлении, но и в слое бизнес логики, как то контроллер или другой сервис (если это, 
конечно, необходимо).

Внутри сервиса `$translate` можно найти некоторые подкомпоненты, которые он использует для того,
чтобы переводить ваш контент. Позже мы рассмотрим это более детально, но, тем не менее, полезно
получить общее представление о том, что же на самом деле там происходит.

### Интерполяторы
Правый прямоугольник представляет возможные сервисы интерполяции. Сервис `$translate` использует их 
для интерполяции ваших переводов путем подстановки значений переменных, которые вы могли бы захотеть 
там использовать. Не переживайте, если не понимаете, что это означает. Позже вы узнаете
все, что нужно об интерполяторах. Впрочем, интерполяционные сервисы отделены от основного ядра и 
могут быть установлены в качестве дополнительных пакетов. В комплекте же с angular-translate 
поставляется стандартный сервис интерполяции.

Интерполяторы оказывают влияние на синтаксис, который нужно использовать в переводах. Стандартный 
сервис интерполяции использует сервис интерполяции ядра Angular, так что если вы знакомы с ним, то 
нет необходимости изучать что-то новое. Сервис интерполяции **MessageFormat** использует другой 
синтаксис, но об этом позже.

### Обработчики отсутствующих переводов
Левый прямоугольник показывает предоставленные обработчики отсутствующих переводов. Они вызываются
когда сервис `$translate` пытается перевести строку, перевода которой не существует. Не обязательно
их использовать, но, если хотите, angular-translate поставляется с логирующим сервисом, который вы
можете установить в качестве дополнения. Также, можно реализовать свой собственный обработчик и 
использовать его.

### Асинхронный загрузчик
Конечно же вы хотите иметь возможность загружать переводы асинхронно, чтобы повысить 
производительность своих приложений. angular-translate поддерживает применение так называемых
асинхронных загрузчиков, которые очень просто использовать. Есть два асинхронных загрузчика: 
`urlLoader` и `staticFilesLoader`. Оба они решают специфические ситуации асинхронной загрузки 
переводов. Также можно создавать свои собственные загрузчики и использовать их.

### Хранилище
Поскольку широко распространено, что приложения, предоставляющие поддержку нескольких языков, должны
запоминать язык, который выбрал пользователь, angular-translate дает возможность использовать
любой тип хранилища. Он проверяет, можно ли полагаться на какое-либо хранилище, и, если это так, 
пытается найти в нем определенную пару ключ-значение, чтобы определить язык, который должен быть 
загружен на самом деле.

angular-translate поставляется с поддержкой localStorage и cookieStorage. Вы можете легко установить
соответствующие пакеты расширений для того, чтобы использовать их.

Теперь вы знаете как структурирован angular-translate, какого рода функциональность предоставляет и
как связаны его компоненты. В следующей главе вы узнаете как начать работать с angular-translate.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
