@ngdoc overview
@name Сервис $translate
@description

# Сервис $translate

`angular-translate` предоставляет несколько вариантов перевода контента вашего приложения. Одним из
них является непосредственное использование предоставляемого сервиса `$translate`. Скорее всего, вы
не будете использовать этот подход, так как он сильно привязывает контроллеры и сервисы вашего
приложения к переводимому контенту. Однако оказалось, что есть случаи, когда может понадобиться 
возможность перевода содержимого с помощью сервиса `$translate`.

Просто представьте случай, что вам нужно перевести содержимое тега `<title>` в вашем HTML документе.
`<title>` никогда не будет находиться внутри директивы `ng-app`, а это значит, что он находится за 
пределами мира Angular. Тогда, для решения этой задачи вам необходимо изменить заголовок приложения
в коде контроллера или сервиса.

### Использование
Тут вам поможет сервис `$translate`. Использовать этот сервис очень просто. Прежде всего, 
нужно внедрить его при помощи внедрения зависимостей (как и любой другой сервис, который вы хотите
использовать в вашем Angular коде). Предположим, что мы хотим расширить приложение, созданное в
главе [Начало работы](#/guide/02_getting-started).

Наш код будет выглядеть примерно так:

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

Теперь, чтобы перевести свой контент с помощью сервиса `$translate`, вам необходимо передать ранее
зарегистрированный при помощи `$translateProvider` идентификатор перевода. Поскольку возможно, что
в момент вызова сервиса происходит асинхронная загрузка данных (мы поговорим об этом позже), сервис
`$translate` тоже ведет себя асинхронно и возвращает обещание (promise), которое либо разрешается
(resolve) с переводом данного идентификатора перевода, либо отбрасывается (reject) с идентификатором
перевода. Таким образом базовое использование сервиса `$translate` на уровне контроллера
(или сервиса) выглядит так:

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate('HEADLINE').then(function (headline) {
   $scope.headline = headline;
  });
  $translate('PARAGRAPH').then(function (paragraph) {
    $scope.paragraph = paragraph;
  });
  $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
    $scope.namespaced_paragraph = anotherOne;
  });
}]);
</pre>

**Заметьте:** Переводы в пространствах имен доступны как JSON свойства (см. 'NAMESPACE.PARAGRAPH').

Это все. Теперь, для перевода содержимого `<title>` вы можете воспользоваться этим контроллером.

## Несколько идентификаторов перевода
Сервис перевода позволяет переводить несколько идентификаторов перевода сразу.

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate(['HEADLINE', 'PARAGRAPH', 'NAMESPACE.PARAGRAPH']).then(function (translations) {
    $scope.headline = translations.HEADLINE;
    $scope.paragraph = translations.PARAGRAPH;
    $scope.namespaced_paragraph = translations['NAMESPACE.PARAGRAPH'];
  });
}]);
</pre>

Однако, сервис всегда будет возвращать объект с переводами -- даже если перевести идентификатор
(или идентификаторы) не получилось. Запросив несколько переводов за один раз, вы должны сами
обработать полученный результат.

## Информация о версии библиотеки angular-translate
Мы предоставляем удобную функцию для получения информации о версии установленной библиотеки, так как
это может быть полезным для какого-нибудь раздела о вашем приложении.

Просто вызовите её вот так:
<pre>
  $translate.versionInfo();
  // returns e.g. "2.1.0"
</pre>

## Имейте ввиду
Пожалуйста, имейте ввиду, что сервис `$translate` по умолчанию не предоставляет двухстороннего
связывания данных! Сервис `$translate` работает асинхронно. Это значит, что он возвращает перевод
для данного идентификатора перевода как только он будет в состоянии его определить. Если перевода
не существует, он вероятно просто вернет идентификатор перевода.

Тем не менее, это не означает, что он знает о смене языка. Поэтому, переводы сделанные при помощи
прямого вызова `$translate` не обновляются при смене языка во время выполнения.

Вы можете это исправить просто обернув ваш вызов `$translate` в `$translateChangeSuccess` колбек
`$rootScope`а, который вызывается  каждый раз при успешной смене языка. Как только он изменится, вы
легко можете повторно выполнить код, ответственный за необходимые вам переводы.

Вот как это выглядит:

<pre>
app.controller('Ctrl', ['$scope', '$translate', '$rootScope', function ($scope, $translate, $rootScope) {
  $rootScope.$on('$translateChangeSuccess', function () {
    $translate('HEADLINE').then(function (translation) {
      $scope.headline = translation;
    });
  });
}]);
</pre>

Вы удивлены почему `$rootScope`, а не просто `$scope`? angular-translate порождает события только на
уровне `$rootScope` исходя из соображений производительности.
Более подробно смотрите в этом посте на [StackOverflow](http://stackoverflow.com/a/19498009/288703).

Вот работающий пример:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
        // expose translation via `$translate` service
        $translate('HEADLINE').then(function (headline) {
          $scope.headline = headline;
        });
        $translate('PARAGRAPH').then(function (paragraph) {
          $scope.paragraph = paragraph;
        });
        $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
          $scope.namespaced_paragraph = anotherOne;
        });
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{headline}}</h1>
      <p>{{paragraph}}</p>
      <p>{{namespaced_paragraph}}</p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
