@ngdoc overview
@name Dynamische Werte
@description

# Dynamische Werte

Jetzt lernst du, wie du dynamische Werte in deinen Übersetzungen verbauen kannst.
Wenn du noch nicht die Guides zum
[$translate- Service](#/guide/03_using-translate-service),
[translate- Filter](#/guide/04_using-translate-filter) und
[translate- Directive](#/guide/05_using-translate-directive), solltest du das jetzt tun!

Der Service, Filter und die Direktive sind ja schon richtig cool. Aber was wenn
dynamische Werte gebraucht werden? Angenommen du möchtest eine Benachrichtigung
mit folgenden Text anzeigen '_Du hast n neue Mails_', während _n_ ein Platzhalter
für ein dynamischen Wert ist.

Selbstverständlich hat `angular-translate` auch darauf eine Antwort. Dynamische
Werte in seine Übersetzungen zu bringen, während man den standard Interpolation-Service
benutzt ist sehr einfach. Richtig gehört. Es hängt vom benutzten Interpolation-Service
ab, wie dynamische Werte innerhalb von Übersetzungen behandelt werden.

## Dynamische Werte in Übersetzungen verwenden

Wenn angular-translate's standard Interpolation-Service verwendet wird, kannst du
ganz einfach Angular's `$interpolate`- Service Syntax verwenden. Also, um dynamische
Werte in einer Übersetzung einzubauen nutzt du einfach Angular's interpolate- Directive.

```
{
  "TRANSLATION_ID": "{{username}} is logged in."
}
```

Während `username` der Identifier ist, an den du von Außen einen Wert zuweisen kannst.
Wie ist es aber nun möglich, diese dynamischen Werte durch die Komponenten zuzuweisen?

## Dynamische Werte in $translate- Service

Du kannst dynamische Werte an $translate- Service als zweiten Parameter übergeben.
`$translate`- Service erwartet ein JavaScript Objekt Hash als zweites Argument
welcher zum Interpolieren dynamischer Werte genutzt wird. Wenn wir also eine
Translation ID habeb wie oben beschrieben, würde man einen dynamischen Wert für
`username` wie folgt übergeben:

<pre>
$translate('TRANSLATION_ID', { username: 'PascalPrecht' });
</pre>

Wenn es Translation Id mit mehr als nur einem Dynamischen Wert gibt, muss das
JavaScript Objekt einfach nur entsprechend erweitert werden.

<pre>
$translate('TRANSLATION_ID', {
  username: 'PascalPrecht',
  lastLogin: '2013-07-21 6:50PM'
});
</pre>

## Dynamische Werte im translate- Filter

Da `translate`- Filter intern `$translate`- Service benutzt, brauchen wir nur einen
Weg dynamische Werte durch den Filter zum Service durchzuschleifen. Da Filter in
Angular keine benamten Parameter erwarten können, ist Dazu eine
bestimmte Syntax nötig, die man auf den Filter anwenden kann. Es gibt zwei Wege
dynamische Werte an den Filter zu übergeben.

Man kann zum Einen ein Objektliteral als String übergeben. Dieser wird dann später
vom `$translate`- Service interpoliert.

<pre>
{{ 'TRANSLATION_ID' | translate:'{ username: "PascalPrecht" }' }}
</pre>

Einfach oder? Aber was ist, wenn `username` kein fixer Wert ist und selbst vorher
interpoliert werden muss? Die einzige Möglichkeit zu interpolierende Werte an
Filter zu übergeben, ist als Objekt-Expression. Die dynamischen Werte müssen  also
als Objekt durch den Controller gebindet werden.

<pre>
angular.module('myApp').controller('Ctrl', ['$scope', function ($scope) {

  $scope.translationData = {
    username: 'PascalPrecht'
  };
}]);
</pre>

Und als nächstes die Werte als Expression übergeben:

<pre>
{{ 'TRANSLATION_ID' | translate:translationData }}
</pre>

### Dynamische Werte in translate- directive

Selbstverständlich kannst du auch dynamische Werte an die Direktive übergeben.
`translate`- Direktive erwartet ein optionales `translate-values`- Attribut, welches
genutzt werden kann um dynamische Werte an die Direktive zu übergeben.

Du kannst entweder ein Objektliteral als String, eine Expression, oder, wenn der Wert dynamisch ist,
als Interpolation übergeben. Der übergebene Ausdruck  wird intern evaluiert und geparst, so dass am
Ende wieder ein JavaScript Objekt herauskommt, welches ohne Probleme an den
`$translate`- Service übergeben werden kann.

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values='{ username: "PascalPrect"}'></ANY>
</pre>

oder

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values="{ username: someScopeObject.username }"></ANY>
</pre>

oder

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values="{{translationData}}"></ANY>
</pre>

## Maßgeschneiderte Übersetzungsattribute

Seit Version 2.0 bietet die 'translate' - Direktive eine weitere, tolle Funktionalität,
um Variablen bzw. Ersetzungen in die Schlüssel und Übersetzungsvorlagen zu bringen.
Weiter oben haben wir gelernt, wie man die 'translate-values' Attribute benutzt.
Aber wie wäre es, wenn wir genauer innerhalb des Quellcodes werden können?
So, dass wir nur ein oder zwei Werte ersetzen wollen, diese aber nur im HTML beschreiben
möchten oder können?

Mit angular-translate ab Version 2.0 funktioniert das problemlos. Dafür können die
individuellen 'translate-value-*'-Attribute genutzt werden!

Das ist ganz einfach:

Gehen wir von folgendem Übersetzungsschlüssel aus:

<pre>
{
  "GREETING": "Hallo, mein Name ist {{name}}"
}
</pre>

Diesen Schlüssel möchten wir gerne durch die 'translate' - Direktive übersetzen lassen.
Das klappt auch ohne weitere Eingriffe, aber mit der Nutzung von 'translate-value-*'
bekommen wir eine Ersetzung des Parameters {{name}} in den Übersetzungsprozess hinein.

Beispiel:

<pre>
<p translate="GREETING" translate-value-name="Pascal"></p>
</pre>

Es muss nur das Präfix 'translate-value-' zusammen mit dem Namen des zu ersetzenden
Textschlüssels angegeben werden - in diesem Fall 'name'.

Natürlich funktioniert das auch mit interpolierten Werten:

<pre>
<p translate="GREETING" translate-value-name="{{name}}"></p>
</pre>

Klasse! Jetzt wissen wir, wie dynamische Werte an die Komponenten übergeben
werden. Aktualisieren wir unsere App. Wir erweitern die Übersetzungstabelle wie folgt:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi, {{name}}'
};
</pre>

Als nächstes übergeben wir einen Namen an die `translate`- Direktive:

<pre>
<p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
</pre>

Der funktionierende Code sieht dann so aus:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi, {{name}}'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht'}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-value-name="PascalPrecht"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
