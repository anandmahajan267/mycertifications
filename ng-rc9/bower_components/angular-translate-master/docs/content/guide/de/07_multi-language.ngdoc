@ngdoc overview
@name Mehrsprachigkeit
@description

# Mehrsprachigkeit

In [Dynamische Werte](#/guide/06_variable-replacement) hast du gelernt, wie du
dynamische Werte an Translation ID's über angular-translate's Komponenten übergeben
kannst. Da wir jetzt alle Basic-Funktionalitäten der Komponenten gelernt haben,
sind wir bereit für's nächste Level: **Mehrsprachigkeit**.

Klar ist es cool zu wissen, wie die Komponenten von angular-translate funktionieren,
aber es wird erst richtig interessant, wenn man einer App mehr als eine Sprache
beibringt (wofür das Modul ja auch eigentlich gedacht ist.). Also los gehts!

## Deiner App mehr Sprachen beibringen


In [Einstieg](#/guide/02_gettin-started) hast du gelernt, wie du mit Hilfe des
`$translateProvider` und der `translations()`- Methode eine Übersetzungstabelle
zu deiner App hinzufügen kannst. Die gleiche Methode kann genutzt werden, um der
App mehr als nur eine Sprache beizubringen. Die Übersetzungstabellen müssen einfach
nur einen Sprachschlüssel liefern, an dessen angular-translate die Übersetzungstabellen
einer Sprache zuweisen kann.

Eine Übersetzungstabelle mit einem Sprachschlüssel hinzuzufügen ist sehr einfach.
Anstatt die Tabelle einfach als Argument an `translations()` zu übergeben,
muss als erster Parameter der Sprachschlüssel übergeben werden, während die Übersetzungstabelle
als zweiter Parameter übergeben wird. Eine Übersetzungstabelle mit Sprachschlüssel
hinzuzufügen, sieht also so aus:


<pre>
// registers translation table with language key 'en'
$translateProvider.translations('en', {
  GREETING: 'Hello world!'
});
</pre>

Um jetzt eine zweite Tabelle hinzuzufügen, sagen wir deutsch, muss einfach das
Gleiche nur mit einem anderen Sprachschlüssel geschehen:

<pre>
// registers translation table with language key 'de'
$translateProvider.translations('de', {
  GREETING: 'Hallo Welt!'
});
</pre>

Ist das einfach? Deine App kennt nun zwei Sprachen. Du kannst so viele Sprachen
hinzufügen wie du möchtest. Wie dem auch sei, jetzt wo es zwei Sprachen gibt,
muss angular-translate ja irgendwoher wissen, welche Sprache genutzt werden soll
richtig? angular-translate bevorzugt keine Sprache, bis du den Auftrag gibst.

## Entscheiden welche Sprache genutzt werden soll

Da jetzt mehr als eine Sprache registriert ist, muss angular-translate wissen,
welche Sprache genutzt werden soll. An dieser Stelle kommt die Methode
`preferredLanguage()` vom `$translateProvider` ins Spiel. Sie sagt angular-translate
welche Sprache genutzt werden soll. Die Methode erwartet als Argument einen
Sprachschlüssel, sinnvollerweise einen der Übersetzungstabellen die du registriert
hast. Um deiner App also zu sagen, sie soll deutsch anstatt englisch als
Standardsprache bevorzugen, muss der Code wie folgt erweitert werden:

<pre>
// tells angular-translate to use the German language
$translateProvider.preferredLanguage('de');
</pre>

**Achtung:** Theoretisch ist es möglich `$translateProvider.use()` zu verwenden.
Allerdings hat sich herausgestellt, dass es in Kombination mit einem asynchronen
Loader zu unschönen Seiteneffekten kommt. Aus diesem Grund wurde `preferredLanguage()`
eingeführt. Wenn man für diesen Anwendungsfall `preferredLanguage()` anstatt
`use()` verwendet, kann man nichts falsch machen.

## Automatische Wahl der präferierten Sprache

Seit Version `2.0` besteht die Möglichkeit, mittels `determinePreferredLanguage()` im
`$translateProvider` die bevorzugte Sprache setzen zu lassen. Die Methode probiert
selbstständig, die bevorzugte Sprache (des Browsers) zu ermitteln. Dafür wird im
`window.navigator` object nach folgenden Parametern geschaut (in dieser Reihenfolge):

- `navigator.languages[0]`
- `navigator.language`
- `navigator.browserLanguage`
- `navigator.systemLanguage`
- `navigator.userLanguage`

Statt `$translateProvider.preferredLanguage(langKey)` zu nutzen, wird folgende Funktion
aufgerufen:

<pre>
// try to find out preferred language by yourself
$translateProvider.determinePreferredLanguage();
</pre>

Die Zuverlässigkeit der Funktion kann allerdings nicht 100% garantiert werden, da jeder
Browser unterschiedliche Werte in diese Parameter einträgt und diese nicht standardisiert
sind.

Ab Version `2.7` steht darüberhinaus `$translateProvider.uniformLanguageTag()` als
Hilfsmittel zur Verfügung. Damit kann man jene so genannten "Language Tags" vereinheitlichen.

<pre>
$translateProvider
  .uniformLanguageTag('bcp47') // enable BCP-47, must be before determinePreferredLanguage!
  .determinePreferredLanguage();
</pre>

Falls die Werte unerwartet oder unpassend sind, kann eine eigene Funktion geschrieben werden,
die entsprechende Werte ermittelt und zurückgibt.

Beispiel:

<pre>
$translateProvider.determinePreferredLanguage(function () {
  var preferredLangKey = '';
  // some custom logic's going on in here
  return preferredLangKey;
});
</pre>

## Eine andere Sprache als Fallback verwenden

Wenn wir davon ausgehen, dass es Translation ID's gibt, zu denen es keine Übersetzung
in einer bestimmten Sprache gibt, weil sich die App noch in der Entwicklung
befindet oder der Übersetzungsprozess schlicht weg noch nicht abgeschlossen ist,
kann es sehr hilfreich sein, eine Sprache als Fallback festzulegen, die in solchen
Fällen in kraft tritt.

`$translateProvider` bietet eine Methode `fallbackLanguage()` mit der sich eine
Fallback-Sprache konfigurieren lässt. Sie erwartet genau wie `preferredLanguage()`
einen Sprachschlüssel. `angular-translate` kümmert sich dann um den Rest.

<pre>
// tells angular-translate to use the English language if translations are not
// available in German
$translateProvider.fallbackLanguage('en');
</pre>

Seit Version 1.1.1 ist angular-translate auch in der Lage, mit mehreren Fallback-Sprachen
umzugehen. Dafür wird einfach statt eines Strings ein Array an die Funktion übergeben.

<pre>
// tells angular-translate to use English language if translations are not
// available in German, French if not even available in English
$translateProvider.fallbackLanguage(['en','fr']);
</pre>


## Sprache zur Laufzeit wechseln

Um die Sprache zur Laufzeit zu wechseln, bietet `$translate`- Service eine Methode
`use()`, welche entweder den Sprachschlüssel der aktuell verwendeten Sprache
zurück gibt, oder, wenn ein Sprachschlüssel übergeben wird, die Sprache neu setzt.
`$translate.use()` führt außerdem asynchrone Loader aus wenn nötig. Dazu aber später
mehr.

Ein guter Anwendungsfall für `$translate.use()` wäre wahrscheinlich in einem Controller,
der sich um das Wechseln der Aktuellen Sprache kümmert. Dazu muss nur eine Funktion
am Scope implementiert werden, die einen Sprachschlüssel erwartet und angular-translate
anpingt, die Sprache zu wechseln.

<pre>
angular.module('myApp').controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };

}]);
</pre>

Um ein Gefühl dafür zu bekommen, wie sich das in einer Beispiel-App verhält,
passen wir unser Beispiel entsprechend an. Wir fügen eine weitere Übersetzungstabelle
für die Sprache deutsch und weitere Übersetzungen hinzu:

<pre>
var translationsEN = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'German',
  BUTTON_LANG_EN: 'English'
};

var translationsDE= {
  HEADLINE: 'Was für ein großartiges Modul!',
  PARAGRAPH: 'Ernsthaft!',
  PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
  PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
  PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'Deutsch',
  BUTTON_LANG_EN: 'Englisch'
};
</pre>

Als nächstes passen wir die Registrierung der Übersetzungtabellen an, dass diese
mit einem Sprachschlüssel registriert werden. Außderdem legen wir englisch als
Standardsprache fest.


<pre>
$translateProvider.translations('en', translationsEN);
$translateProvider.translations('de', translationsDE);
$translateProvider.preferredLanguage('en');
</pre>

Cool! Jetzt brauchen wir nur noch Buttons, mit denen wir die Sprache zur Laufzeit
wechseln können. Wir fügen HTML-Buttons für jede Sprache hinzu und versehen sie
mit einer `ng-click`- Direktive:

<pre>
<button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
<button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
</pre>

Zum Schluss implementieren wir noch die entsprechende Funktion an unserem
Controller-Scope:

<pre>
app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };
}]);
</pre>

Et vóila! Schon haben wir Unterstützung für Mehrsprachigkeit!


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        MISSING_TRANSLATION: 'Oops! I have not been translated into German...',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        // MISSING_TRANSLATION is ... missing :)
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        $translateProvider.fallbackLanguage('en');
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
      <p translate>MISSING_TRANSLATION</p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
