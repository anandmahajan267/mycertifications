@ngdoc overview
@name Storages
@description

# Storages

Wir haben viel über angular-translate in den letzten Kapiteln gelern. Wir wissen,
wie wir unsere [Übersetzungen dynamisieren](#/guide/06_variable-replacement) können.
Wir haben auch gelernt, wie man [einer App mehrere Sprachen beibringt](#/guide/07_multi-language).
Aber da ist immer noch etwas, was sich komisch anfühlt, wenn wir unsere App
aufrufen. Jedes Mal, wenn wir unsere App starten, müssen wir den 'Deutsch'- Button
klicken.

Unsere App kann sich also einfach nicht merken, welche Sprache wir gewählt hatten,
als wir das letzte mal die App gestartet hatten. Dieses Kapitel zeigt dir, wie du
deiner App beibringen kannst, dass sie sich die Sprache eines Benutzers merkt.


## Sich an eine Sprache erinnern

Um deiner App beizubringen sich an die gewählte Sprache des Nutzers zu erinnern,
bietet `angular-translate` Unterstützung für sogenannte **Storages**. Welchen
Storage auch immer du benutzt, angular-translate wird den Sprachschlüssel unter
einem bestimmten Identifier in diesem Speichern, so dass das Modul das nächste
Mal wenn der Benutzer die App startet,danach suchen kann.

angular-translate hat bringt standardmäßig Unterstützung für zwei Storages.
**localStorage** und **cookieStorage**. Während localStorage den cookieStorage
als Fallback verwendet, falls der Browser kein localStorage unterstützt. Um
einen dieser Storages zu verwenden, müssen die entsprechenden Extensions
installiert werden.


## cookieStorage benutzen

Wenn du den cookieStorage benutzen möchtest, kannst du die dazu passende Extension
wie folgt mit Bower installieren:

```
$ bower install angular-translate-storage-cookie
```

Nach dem du die Extension in dein HTML-Dokument eingebunden hast, kannst du die
`useCookieStorage()`- Methode des `$translateProvider` verwenden. angular-translate
kümmert sich dann um den Rest.

<pre>
$translateProvider.useCookieStorage();
</pre>

Ist das einfach? angular-translate speichert ab jetzt den Sprachschlüssel im cookieStorage
und schaut jedes mal, wenn die App aufgerufen wird, ob bereits einer vorhanden ist
und setzt die dazu passende Sprache.

## Using localStorage

Für den Fall dass du lieber den localStorage als den cookieStorage verwenden möchtest,
kannst du auch hierfür ganz einfach die entsprechende Extension installieren. Danach
benutzt du die `useLocalStorage()`- Methode des `$translateProvider` um das gleiche
Ergebnis wie mit dem cookieStorage zu erreichen. Nur eben mit dem localStorage.

Denk daran, dass localStorage cookieStorage als Fallback verwenden und deswegen
**beide** extensions vorhanden sein müssen.

Die Extension kannst du wie folgt installieren:

```
$ bower install angular-translate-storage-local
```

Als nächstes muss nur noch der `$translateProvider` informiert werden.

<pre>
$translateProvider.useLocalStorage();
</pre>

Das war's! Updaten wir unsere Beispiel App!

<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useLocalStorage();
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Wechsel die Sprache und refreshe den Browser! Die App sollte sich daran erinnern
welche Sprache vorher gewählt wurde!

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
