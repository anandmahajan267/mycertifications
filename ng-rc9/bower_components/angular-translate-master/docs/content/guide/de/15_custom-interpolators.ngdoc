@ngdoc overview
@name Custom Interpolator
@description

# Custom Interpolator

Wenn du fit genug bist eine kleinere MessageFormat Library zu entwickeln,
oder wenn du einfach eine andere Interpolation brauchst, kannst du ganz einfach
deinen eigenen Interpolation Service schreiben, den du dann in deinen Apps nutzen
kannst. Alles was du tun musst, in ein bestimmtes Interface zu implementieren.
Schauen wir, wie's funktioniert!

## Einen eigenen Interpolation-Service bauen

Die Entwicklung eines Custom Interpolation-Services sollte einem recht bekannt
vorkommen wenn man [Eigene Storages](#/guide/11_custom-storages) und
[Eigene Loader](#/guide/13_custom-loaders) gelesen hat. Du startest mit einer Factory
die ein Objekt zurück gibt, die folgendes Interface implementiert:


- `setLocale(langKey)` - Setzt die Sprache mit Sprachschlüssel
- `getInterpolationIdentifier()` - Gibt einen Identifier für den Service zurück
- `interpolate(string, interpolateParams)` - Interpoliert Strings gegen Interpolationparamter

So könnte ein custom Interpolation-Service aussehen:

<pre>
app.factory('customInterpolation', function () {

  return {

    setLocale: function (locale) {

    },

    getInterpolationIdentifier: function () {

    },

    interpolate: function (string, interpolateParams) {

    }
  };
});
</pre>

Okay, das ist die Basisstruktur eines Interpolation-Services. Jetzt fügen wir etwas
logic hinzu, damit angular-translate was mit dem Service anfangen kann:

<pre>
app.factory('customInterpolation', function ($interpolate) {

  var $locale;

  return {

    setLocale: function (locale) {
      $locale = locale;
    },

    getInterpolationIdentifier: function () {
      return 'custom';
    },

    interpolate: function (string, interpolateParams) {
      return $locale + '_' + $interpolate(string)(interpolateParams) + '_' + $locale;
    }
  };
});
</pre>

Also, was haben wir gemacht. `setLocale()` speichert einfach den Wert des Sprachschlüssels.
`getInterpolationIdentifier()` gibt einen String `custom` zurück. Wofür ist das
eigentlich gut? Erinnerst du dich wie du ein [Interpolation-Service temporär
überschreiben](#/guide/14_pluralization#overridinginterpolationtemporarily) kannst?
Genau. Dieser Identifier wird auf deinen Service gemappt, damit angular-translate
ihn wieder erkennen kann. `interpolate()` benutzt einfach  Angular's `$interpolate`-
Service. Außerden hängt es noch den aktuellen Sprachschlüssel an jede Translation.

## Den eigenen Interpolation-Service benutzen

Analog zu `useStorage()` und `useLoader()` gibt es eine Methode `useInterpolation()`
am `$translateProvider`. Wie die anderen Methoden erwartet sie einen Factory Namen
als Parameter um einen Interpolation-Service zu registrieren und zu benutzen.

<pre>
$translateProvider.useInterpolation('customInterpolation');
</pre>

Deine App benutzt nun den custom Interpolation-Service als standard Interpolation
für alle Übersetzungen. Wie du gelernt hast, kannst du ihn aber auch als optionalen
Interpolation-Service registrieren:

<pre>
$translateProvider.addInterpolation('customInterpolation');
</pre>

So siehts aus:

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.preferredLanguage('en');
        $translateProvider.useInterpolation('customInterpolation');

        $translateProvider.translations('en', {
          HEADLINE: 'I\'m a headline',
          TEXT: 'I\'m using default interpolation {{ val + val }}',
          PLURAL: '{GENDER, select, male{He} female{She} other{They}} liked this.',
          BUTTON_LANG_EN: 'English',
          BUTTON_LANG_DE: 'German'
        });

        $translateProvider.translations('de', {
          HEADLINE: 'Ich bin eine Überschrift',
          TEXT: 'Ich benutze default interpolation {{ val + val }}',
          PLURAL: '{GENDER, select, male{Er fand} female{Sie fand} other{Sie fanden}} es gut.',
          BUTTON_LANG_EN: 'Englisch',
          BUTTON_LANG_DE: 'Deutsch'
        });
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);

      app.factory('customInterpolation', function ($interpolate) {

        var $locale;

        return {

          setLocale: function (locale) {
            $locale = locale;
          },

          getInterpolationIdentifier: function () {
            return 'custom';
          },

          interpolate: function (string, interpolateParams) {
            return $locale + '_' + $interpolate(string)(interpolateParams) + '_' + $locale;
          }
        };
      });

    </script>
    <div ng-controller="Ctrl">
      <p translate="HEADLINE"></p>
      <p translate="TEXT" translate-values="{ val: 5 }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>


<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
