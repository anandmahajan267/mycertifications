@ngdoc overview
@name Sicherheit
@description

# Escapen dynamischer Werte

Für reguläre Ausgaben sorgt bereits AngularJS im Allgemeinen intern dafür, dass
die Ausgabe korrekt escaped ausgegeben wird. Allerdings kann es bei der Verwendung
`angular-translate` dazu führen, dass dynamische Inhalte im Ergebnis nicht korrekt
escaped werden. Dies führt zu ernsthaften Sicherheitslücken innerhalb der eigenen
Applikation (siehe auch: <a href="https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)">OWASP</a>).

## Allgemeine Benutzung

Grundsätzlich konfiguriert man die Ausgabeform mittels `useSanitizeValueStrategy(strategy)`
und einer gewünschte Security-Strategy; dies gilt dann für die gesamte Applikation.

Derzeit gibt es folgende Standardstrategien:

* `sanitize`: bereinigt HTML in den Übersetzungen mittels `$sanitize`
* `escape`: escaped HTML in den Übersetzungen
* `sanitizeParameters`: bereinigt HTML der Inhalte von Interpolation Parametern mittels `$sanitize`
* `escapeParameters`: escaped HTML der Inhalte von Interpolation Parametern

**Momentan gibt es einen Defekt mit der `sanitize` Strategie, durch den UTF-8 Entities doppelt encodiert werden. Empfehlung: Die `escape` Strategie verwenden, solange bis dies behoben ist.**

Darüberhinaus gibt es noch folgende, welche aber nur noch für Version zur Verfügung stehen:
* `null`: nichts, unsicherer Standard (wird in 3.0 entfernt)
* `escaped`: Synonym für 'escapeParameters' (seit 2.7.0, wird in 3.0 entfernt)

Um eine vollständige Rückwärtskompatibilität zu gewährleisten, ist das Feature derzeit
deaktiviert:

```javascript
$translateProvider.useSanitizeValueStrategy(null);
```

Selbstverständlich empfehlen wir aber das aktivierte Escaping (in einer späteren
Version wird dies Standard sein):

```javascript
$translateProvider.useSanitizeValueStrategy('sanitize');
```

Wir empfehlen dringlich eine sichere Strategie zu aktivieren. Daher zeigen wir
einen Warnhinweis an, so lange nicht explizit eine Strategie gewählt wurde.

## Anwendungsbeispiele

### Weder Escaping noch Sanitizing der Übersetzungen

<doc:example module="myApp_not_escaped">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'XSS possible!',
        PARAGRAPH: 'Hello {{username}}!',
      };

      var app = angular.module('myApp_not_escaped', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
        // Using standard escaping (nothing)
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p translate="PARAGRAPH" translate-values="{username: '<span style=\'color:red;\'>HACKED</span>'}"></p>
    </div>
  </doc:source>
</doc:example>

### Escaping der gesamten Übersetzung

<doc:example module="myApp_escaped">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'XSS possible!',
        PARAGRAPH: 'Hello {{username}}!',
      };

      var app = angular.module('myApp_escaped', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
        // Enable escaping of HTML
        $translateProvider.useSanitizeValueStrategy('escape');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p translate="PARAGRAPH" translate-values="{username: '<span style=\'color:red;\'>HACKED</span>'}"></p>
    </div>
  </doc:source>
</doc:example>

### Escaping nur der dynamischen Parameter

<doc:example module="myApp_escape_params">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'XSS possible!',
        PARAGRAPH: '<span style=\'color:green\'>Hello</span> {{username}}!',
      };

      var app = angular.module('myApp_escape_params', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
        // Enable escaping of HTML
        $translateProvider.useSanitizeValueStrategy('escapeParameters');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p translate="PARAGRAPH" translate-values="{username: '<span style=\'color:red;\'>HACKED</span>'}"></p>
    </div>
  </doc:source>
</doc:example>

### Sanitizing der gesamten Übersetzung

<doc:example module="myApp_sanitize">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'XSS possible!',
        PARAGRAPH: 'Hello {{username}}!',
      };

      var app = angular.module('myApp_sanitize', ['pascalprecht.translate', 'ngSanitize']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
        // Enable escaping of HTML
        $translateProvider.useSanitizeValueStrategy('sanitize');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p translate="PARAGRAPH" translate-values="{username: '<span style=\'color:red;\'>HACKED</span>'}"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
