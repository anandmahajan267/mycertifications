@ngdoc overview
@name Eigene Storages
@description

# Eigene Storages

Wenn du [Storages](#/guide/10_storages) gelesen hast, weißt du wie du entweder
localStorage oder cookieStorage verwenden kannst, um deiner App beizubringen sich
die Sprache zu merken, die ein Benutzer zuletzt gewählt hat. Wenn sowohl cookieStorage
also auch localStorage nicht deinen Ansprüchen entsprechen, kannst du ganz einfach
eigene Storage-Services schreiben und diese verwenden.

## Einen eigenen Storage- Service bauen

Wenn du einen anderen Storage verwenden möchtest, musst du deinen eigenen Storage-Service
entwickeln, der ein bestimmtes Interface implementieren muss. In JavaScript gibt
es keine Interfaces. Deswegen wird hier beschrieben, welche Methoden ein Storage-Service
implementieren muss. Es wird nur eine `put()`- und eine `get()`- Methode gebraucht.

Nehmen wir also an, wir wollen unsere Beispiel-App mit einem eigenen Storage-Service
versehen. Dazu müssen wir nur sicher Stellen, dass unser Service eine `put()`- und
eine `get()`- Methode implementiert. Unser Service könnte so aussehen:

<pre>
app.factory('customStorage', function () {
  return {
    put: function (name, value) {
      // store `value` under `name` somehow
    },
    get: function (name) {
      // request value of `name` somehow
    }
  };
});
</pre>

Wie du sehen kannst, erwartet `put()` zwei Parameter mit einem Namen und einen Wert.
Die `get()`- Methode braucht nur einen Namen um einen bestimmten Wert aus dem
vorhanden Speicher anzufragen. Da wir Storage-Services als echt Angular Services
implementieren müssen, können wir automatisch von einfachen Testing und Dependency
Injection profitieren.

## Den Service benutzen

Wenn du deinen Service entwickelt hast, kannst du angular-translate sagen, dass dieser
benutzt werden soll. Es gibt analog zur `useCookieStorage()`- und `useLocalStorage()`-
Methode, eine `useStorage()`- Methode. Eigentlich sind die ersteren Beiden Shortcuts
für `useStorage()`. Wie dem auch sei, diese Methode erwartet den Namen eines
Services. In unserem fall ist es `customStorage`.


<pre>
$translateProvider.useStorage('customStorage');
</pre>

angular-translate nutzt den `$injector` um eine Instance des Custom Storages zu bekommen.
Danach kann dieser wieder jeder andere Storage-Service auch, genutzt werden um
der App beizubringen, sich eine Sprache zu merken.

<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useStorage('customStorage');
      }]);

      app.factory('customStorage', function () {
        return {
          put: function (name, value) {
            // store `value` under `name` somehow
          },
          get: function (name) {
            // request value of `name` somehow
          }
        };
      });

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
