@ngdoc overview
@name $translate- Service benutzen
@description

# $translate- Service benutzen

`angular-translate` bietet verschiedene Wege die Inhalte deiner App zu übersetzen.
Ein Weg ist, den `$translate`- Service direkt zu benutzen. Eigentlich würde man
dass nicht machen, da es schönere Wege gibt (zum Beispiel via Filter oder Direktiven),
da die Übersetzungslogik zu stark an einem Controller oder Service gekoppelt wäre.
Es stellte sich allerdings heraus, dass es tatsächlich Anwendungsfälle für die
direkte Benutzung des `$translate`- Service gibt.

Stelle dir einfach nur vor, du möchtest den `<title>` deines HTML-Dokuments
übersetzen.`<title>` wird sich niemals innerhalb einer `ng-app`- Direktive befinden,
was bedeutet, `<title>` wird immer außerhalb der Angular-Welt sein. Man muss also
den App-Titel manipulieren, während wir uns in der Laufzeit befinden, sprich:
zum Beispiel innerhalb eines Controllers oder Services.

## Allgemeine Benutzung
An dieser Stelle kommt `$translate`- Service ins Spiel. `$translate`- Service
zu benutzen ist sehr einfach. Alles was du tun musst, ist den Service in deinem
Code zu injecten. Der Code könnte so aussehen:

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

Um jetzt Inhalte zu übersetzen, muss nichts weiter geschehen, als dem `$translate`-
Service eine Translation ID zu übergeben (die vorher durch `$translateProvider`
registriert wurde). Da es möglich ist, dass Translation-Daten asynchron geladen
werden müssen, verhält sich `$translate` Service ebenfalls asynchron und gibt ein Promise
zurück, dass entweder mit der Übersetzung ausgelöst oder mit der Translation ID
ausgeworfen wird. So würde also die Benutzung von `$translate` Service innerhalb
eines Controllers wie folgt aussehen:

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate('HEADLINE').then(function (headline) {
    $scope.headline = headline;
  });
  $translate('PARAGRAPH').then(function (paragraph) {
    $scope.paragraph = paragraph;
  });
  $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
    $scope.namespaced_paragraph = anotherOne;
  });
}]);
</pre>
**Achtung:** Übersetzungen mit Namespaces werden mit Dot-Notation aufgelöst (siehe: 'NAMESPACE.PARAGRAPH'`).

Das ist alles. Also, falls du darüber nachdenkst deinen `<title>` zu übersetzen,
kannst du dies in deinem Controller machen.

## Mehrere TranslationIds auf einmal
Der Service kann auch mehrere Übersetzungen auf einmal laden.

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate(['HEADLINE', 'PARAGRAPH', 'NAMESPACE.PARAGRAPH']).then(function (translations) {
    $scope.headline = translations.HEADLINE;
    $scope.paragraph = translations.PARAGRAPH;
    $scope.namespaced_paragraph = translations['NAMESPACE.PARAGRAPH'];
  });
}]);
</pre>

Dabei muss jedoch beachtet werden, dass der Service immer ein Objekt mit allen
Übersetzungen zurückgibt. Dabei spielt es keine Rolle, ob eine einzelne
Übersetzung (oder sogar alle) nicht übersetzt werden konnten. Eine mögliche
Fehlerbehandlung muss von Deiner Seite aus geschehen.

## angular-translate Versionsinformationen
Für einige Anwendungen mag es sinnvoll sein, die eingesetzte Version im "Über uns"-Bereich o.ä. anzuzeigen.
Damit dieses problemlos möglich ist, beinhaltet angular-translate eine Funktion, die sehr einfach verwendet werden
kann und die aktuelle Modulversion zurückgibt:

<pre>
  $translate.versionInfo();
  // returns e.g. "2.1.0"
</pre>

## Dinge die berücksichtigt werden sollten
Bitte beachte dass `$translate` Service kein Two-Way Data-Binding unterstützt.
`$translate` Service arbeitet asynchron, dass bedeteut aber nicht, dass er informiert
wird, wenn sich die Sprache ändert. Also ändern sich Übersetzungen nicht,
wenn sich die Sprache ändert, sofern diese mit dem Service übersetzt wurden.

Man dies aber ganz einfach möglich machen, in dem man auf das `$translateChangeSuccess`
Event horcht. Dieser Event wird jedes mal gefeuert, wenn die Sprachtabelle gewechselt
wird.

So würde das aussehen:

<pre>
app.controller('Ctrl', ['$scope', '$translate', '$rootScope', function ($scope, $translate, $rootScope) {
  $rootScope.$on('$translateChangeSuccess', function () {
    $translate('HEADLINE').then(function (translation) {
      $scope.headline = translation;
    });
  });
}]);
</pre>

Warum am `$rootScope` anstatt am `$scope`? angular-translate `$emitted` nur auf
`$rootScope` Level aus Performance-Gruenden.
Dieser [StackOverflow](http://stackoverflow.com/a/19498009/288703) Post erklaert warum.

Hier ein funktionierendes Beispiel:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
        // expose translation via `$translate` service
        // expose translation via `$translate` service
        $translate('HEADLINE').then(function (headline) {
          $scope.headline = headline;
        });
        $translate('PARAGRAPH').then(function (paragraph) {
          $scope.paragraph = paragraph;
        });
        $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
          $scope.namespaced_paragraph = anotherOne;
        });
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{headline}}</h1>
      <p>{{paragraph}}</p>
      <p>{{namespaced_paragraph}}</p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
