@ngdoc overview
@name Guide
@description

# i18n in AngularJS Anwendungen, einfach gemacht

####Der einfachste i18n und l10n in deiner Angular apps zu bringen

<br>
Du brauchst Internationalisierung und Lokalisierung in deinen Angular apps und
konntest bisher keinen einfachen Weg dafür finden? angular-translate hilft aus.
angular-translate kommt mit einer Menge nützlicher Features und Erweiterungen
und bietet oben drauf große Flexibilität. Das (und noch viel mehr) steckt drin:

## Features

- Komponenten (Filter/Direktiven) um Inhalte zu übersetzen
- Asynchrones Laden von i18n Daten
- Pluralisierung-Unterstützung durch [**MessageFormat.js**](https://github.com/SlexAxton/messageformat.js)
- Erweiterbarkeit durch einfach zu benutzende Interfaces


Wenn du angular-translate in einen deiner Projekte benutzt, oder das Modul generell
großartig findest (was du solltest), dann mache es öffentlich! Besuche [angular-translate
auf ngmodules](http://ngmodules.org/modules/angular-translate) und klicke auf den
"_I use it_" -Button! angular-translate ist einfach zu installieren und noch einfacher
zu benutzen! In dieser Dokumentation lernst du, wie du dieses Modul und seine
coolen Features nutzen kannst. Hier ein kleiner Einblick:

## Quick Start
Modul via Bower installieren:

```
$ bower install angular-translate
```

Nicht vergessen das Skript einzubinden:

<pre>
<script src="path/to/angular-translate.js"></script>
</pre>

`angular-translate` als Dependency in der App deklarieren:

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

Deiner App Übersetzungen beibringen:

<pre>
app.config(['$translateProvider', function ($translateProvider) {
  $translateProvider.translations('en', {
    'TITLE': 'Hello',
    'FOO': 'This is a paragraph',
  });

  $translateProvider.translations('de', {
    'TITLE': 'Hallo',
    'FOO': 'Dies ist ein Absatz'
  });

  $translateProvider.preferredLanguage('en');
}]);
</pre>


Und zum Schluss deine App übersetzen:

<pre>
<h1>{{ 'TITLE' | translate }}</h1>
<p>{{ 'FOO' | translate }}</p>
</pre>

Dies ist ein sehr einfaches Beispiel welches zeigt, wie angular-translate eigentlich
funktioniert. Grundsätzlich funktioniert alles nach folgenden Ablauf:
"_i18n- Daten bereit stellen, angular-translate beibringen dass es diese gibt,
und entsprechende Komponenten verwenden um die Übersetzungen (gegen Werte) zu
interpolieren._".
Einfach, hm?

## Nützliche Ressourcen
Es gibt im Internet ein paar Ressourcen die möglicherweise interessant für dich sind. Also
nicht vergessen einen Blick hier drauf zu werfen:

- [Tutorial auf ng-newsletter.com](http://www.ng-newsletter.com/posts/angular-translate.html)
- [angular-translate und "Partial Loading"](http://technpol.wordpress.com/2013/11/02/adding-translation-using-angular-translate-to-an-angularjs-app/)
- [Beispiele und Demos](https://github.com/angular-translate/angular-translate/wiki/Demos) - Zur Zeit auf plnkr.co
- [Tutorial auf angularjs.de](http://angularjs.de/artikel/angularjs-i18n-ng-translate) - Deutscher Artikel
- [angular-translate auf GitHub](http://github.com/angular-translate/angular-translate) - Das GitHub Repository
- [angular-translate auf ngmodules.org](http://ngmodules.org/modules/angular-translate)
- [angular-translate Mailinglist](https://groups.google.com/forum/#!forum/angular-translate) - Diskutieren!

## Danke, Community!
Wir haben bis jetzt wirklich sehr viel positives Feedback bekommen! Immer mehr
Menschen benutzen angular-translate und sind dankbar für jede Hilfe die sie bekommen.
Ich möchte an dieser Stelle nur sicher stellen, dass das alles nicht ohne
[diese Contributor](http://github.com/PascalPrecht/angular-translate/contributors)
 und jedem der mit neuen Ideen und Anfragen kommt, möglich gewesen wäre!
Also **Danke**!

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
