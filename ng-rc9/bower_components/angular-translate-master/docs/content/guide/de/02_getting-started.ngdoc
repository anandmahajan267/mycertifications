@ngdoc overview
@name Einstieg
@description

# Einstieg

### HTML

Um loszulegen binde `angular-translate` in dein HTML-Dokument ein. Dies muss
selbstverständlich passieren **nachdem** angular selbst eingebuden wurde.

<pre>
<html>
  <head>
    <meta charset="utf-8">
    <title>i18n app</title>

    <script src="path/to/angular.js"></script>
    <script src="path/to/angular-translate.js"></script>
    <script src="app.js"></script>
  </head>

  <body ng-app="myApp">

  </body>
</html>
</pre>

### Dependencies deklarieren

Als nächstes kannst angular-translate als Dependency deiner App deklarieren.
Durch Angular's Dependency Injection ist das keine große Herausforderung.
Das Modul muss einfach nur in entsprechender Syntax injected werden, wie der
folgende Code zeigt.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

### Einführung in den `$translateProvider`

Da angular-translate nun quasi Teil deiner Anwendung ist, kannst du auf all seine
Komponenten zugreifen. Angular folgt einer ziemlich durchdachten Architektur
wenn es darum geht Services zu konfigurieren, die später in der App verwendet
werden sollen. Werfen wir einen Blick auf den folgenden Code.

<pre>
app.config(function ($locationProvider) {
  $locationProvider.html5Mode(true);
});
</pre>

Oder vielleicht die Konfiguration eines `$route`- Services:

<pre>
app.config(function ($routeProvider) {
  $routeProvider.when('/something', {
    templateUrl: 'url/to/template',
    controller: 'SomeFancyCtrl'
  });
});
</pre>

Also was hier eigentlich passiert ist nicht etwa die _Benutzung eines bestimmten
Services_ um Dinge zu konfigurieren. Es ist die _Konfiguration eines Services
durch einen bestimmten Provider_, welcher später in deiner App verwendet wird.
Was bedeutet: `$locationProvider.html5Mode(true)` konfiguriert den `$location`
**Service**, dass er im HTML5-Modus arbeitet. Also, wenn ein Service von außen
konfigurierbar sein soll, muss es einen korrespondierenden Provider geben der
ein entsprechendes Interface bietet.

angular-translate bringt einen `$translateProvider` mit dem man den `$translate`-
Service konfigurieren kann. Dieser Service wird von Direktiven und Filtern
verwendet. Damit der `$translate`- Service weiß was er übersetzen soll, muss
dem Service klar gemacht werden, welche Übersetzungen es eigentlich gibt.

An dieser Stelle kommt `$translateProvider` ins Spiel. `$translateProvider` hat
Methoden mit denen man einer App mehrere Sprachen beibringen kann, damit `$translate`-
Service sich auf diese beziehen kann.

### Deiner App Sprachen beibringen

Mit dem `$translateProvider` ist es sehr einfach deiner App eine Sprache
beizubringen. Als erstes musst du den Provider in deiner Modulkonfiguration
verfügbar machen.

<pre>
app.config(function ['$translateProvider', ($translateProvider) {

}]);
</pre>

Um jetzt eine Sprache hinzuzufügen, musst du `$translateProvider` eine Übersetzungstabelle
beibringen. Was genau bedeutet das? Eigentlich ist es ganz einfach.
angular-translate erwartet Übersetzungstabellen as JSON-Objekte. Also alles was
du tun musst, ist deine Übersetzungstabelle als JavaScript Hash Object, oder,
wenn du sie asynchron lädst, als JSON- Objekt verfügbar machen. So könnte eine
Übersetzungstabelle aussehen:

```json
{
  "TRANSLATION_ID": "This is a concrete translation for a specific language."
}
```

Einfach oder? Die oben gezeigte Übersetzungstabelle beinhaltet nur eine Übersetzung.
Wie du sehen kannst, repräsentiert der Key eine Translation ID, während der Value
eine konkrete Übersetzung darstellt. Du musst nicht einmal in deiner Übersetzungstabelle
angeben, um welche Sprache es sich handelt.

Außerdem kannst du deine Übersetzungen in Namespaces unterteilen um sie wartbarer
zu machen. Das könnte grade bei komplexen Anwendungen interessant sein.

```json
{
  "NAMESPACE": {
    "SUB_NAMESPACE": {
       "TRANSLATION_ID1": "This is a namespaced translation."
    }
  }
}
```

Diese Übersetzungstabelle hat auch nur eine Translation ID, aber du kannst sie
sehr einfach erweitern. Translation ID's lassen sich beliebig tief verschachteln.

Jetzt fügen wir eine Übersetzungstabelle unserer App hinzu. `$translateProvider`
hat eine Methode `translations()` die sich darum kümmert. Wir gehen jetzt von
folgender Übersetzungstabelle aus:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  NAMESPACE: {
    PARAGRAPH: 'And it comes with awesome features!'
  }
};
</pre>

Wr fügen diese Tabelle mit `$translateProvider.translations()` hinzu:

<pre>
app.config(function ['$translateProvider', ($translateProvider) {
  // add translation table
  $translateProvider
    .translations('en', translations)
    .preferredLanguage('en');
}]);
</pre>

Das ist eigentlich alles was du tun musst. Die translation table wird einfach unter
einem Sprachschlüssel registriert. Danach sagen wir angular-translate welche Sprache
wie nun benutzen wollen. Da wir die Übersetzungen zur Konfigurationszeit
hinzufügen, kann `$translate`- Service später zur Laufzeit auf sie zugreifen.
Hier ist der funktionierende Code:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);
    </script>
    <div>
      <h1>Nothing to see here yet!</h1>
      <p>But we'll change it now</p>
    </div>
  </doc:source>
</doc:example>

Im nächsten Kapitel lernst du wie die mitgelieferte Direktive und den Filter
verwendest.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
