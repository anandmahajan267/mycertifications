@ngdoc overview
@name Асинхронне завантаження
@description

# Асинхронне завантаження

Окей, різні переклади для різних мов - це круто. Але ще краще мати можливість завантаження
перекладів асинхронно, правда? В `angular-translate` є кілька вельми кльових розширень для підтримки
асинхронного завантаження даних перекладів. І це працює як годинник.

## Асинхронні завантажувачі
angular-translate надає доволі хитрий спосіб, щоб сказати сервісу $translate завантажити дані
асинхронно. Для завантаження даних з сервера вам необхідно скористатися асинхронним завантажувачем,
який буде викликаний пізніше під час виконання при необхідності. angular-translate поставляється з
підтримкою трьох різних асинхронних завантажувачів. Будь-який з них можна встановити з допомогою
Bower. Давайте на них подивимося!

## Використання urlLoader
Це, напевно, найпростіший спосіб завантаження даних перекладів асинхронно. Все, що для цього
потрібно - це встановити розширення `angular-translate-loader-url` з допомогою Bower:

```
$ bower install angular-translate-loader-url
```

Коли воно встановиться, впевніться, що включили його в свій HTML документ. Добре, завантажувач тепер
доступний і повинні сказати angular-translate використовувати його. `$translateProvider`  надає
метод під назвою `useUrlLoader()`. Дуже просто, так? `useUrlLoader()` приймає аргумент, який описує
кінцеву точку на сервері, яка поверне у відповідь дані перекладу.

До того ж, при використанні асинхронних завантажувачів ми повинні використовувати
`$translateProvider.preferredLanguage()` для того, щоб вказати angular-translate мову, для якої
потрібно завантажити переклад.

<pre>
$translateProvider.useUrlLoader('foo/bar.json');
$translateProvider.preferredLanguage('en');
</pre>

Тож, що тут відбувається? angular-translate використовує розширення для перетворення даного рядку
в реальну функцію-завантажувач, яка може бути викликана пізніше під час виконання, як тільки  буде
створено екземпляр сервісу `$translate`. В додаток до цього, вказівка angular-translate
використовувати ключ мови 'en' додає його в якості параметру запиту до даного рядка завантажувача.

Таким чином, приклад вище насправді робить запит до `foo/bar.json?lang=en`. angular-translate також
зверне увагу, якщо немає ніяких доступних даних перекладів при запуску і автоматично викличе
завантажувач якнайскоріше.

## Використання staticFilesLoader

У випадку, якщо у вас немає URL, що очікує параметра `lang` щоб повернути JSON, що містить ваші
переклади, але є кілька файлів локалізації, які підпадають під який-небудь шаблон, то вам, напевно,
потрібно використовувати розширення `angular-translate-loader-static-files`, яке описує шаблон ваших
файлів локалізації.

Як і urlLoader, ви можете встановити розширення staticFilesLoader з допомогою Bower:
```
$ bower install angular-translate-loader-static-files
```

Коли пакет встановлено і підключено, ви можете викликати `useStaticFilesLoader()` метод
`$translateProvider`'а, щоб сказати angular-translate, що необхідно використовувати його.
Завантажувач статичних файлів працює трохи інакше. Замість того, щоб мати фіксований URL, який
потребує лише параметр `lang`, ви тепер можете мати різні файли локалізації, які підходять під
певний шаблон.

Те, як виглядає цей шаблон, залежить від ваших потреб. Для вказання шаблону необхідна наступна
інформація:

* **prefix** - вказує префікс назви файла
* **suffix** - вказує суфікс назви файла

Скажімо, у вас є два файла локалізації `locale-de.json` і `locale-en.json`. Ви легко можете
скористатися завантажувачем наступним чином:

<pre>
$translateProvider.useStaticFilesLoader({
    prefix: 'locale-',
    suffix: '.json'
});
$translateProvider.preferredLanguage('en');
</pre>

Крім того, якщо у вас є декілька файлів з перекладами, що знаходяться у різних місцях, то можна
передати завантажувачу масив файлів:

<pre>
$translateProvider.useStaticFilesLoader({
    files: [{
        prefix: 'locale-',
        suffix: '.json'
    }, {
        prefix: '/absolute/path/to/locale-',
        suffix: '.json'
    }, {
        prefix: 'another/path/to/locales/',
        suffix: ''
    }]
});
$translateProvider.preferredLanguage('en');
</pre>

angular-translate об'єднає передану інформацію в `{{prefix}}{{langKey}}{{suffix}}`. Таким чином буде
завантажено `locale-en.json`. І знову, так як ще немає ніяких доступний даних перекладів,
angular-translate завантажить його автоматично якнайшвидше.

## Використання partialLoader
Працюючи з достатньо великим і складним застосунком, його зазвичай розділяють на кілька підмодулів.
Наприклад, у вам може бути модуль `mainApp`, що залежить від модулів `home` і `contact`. Це всього
2 підмодулі, а тепер уявіть, що ваш застосунок дійсно великий і складається з 10 або 20 підмодулів!

В такого роду застосунках приблизно 13 з 20 підмодулів майже ніколи не виконуються просто тому, що
користувач туди не заходить. Перекладаючи контент застосунка, коли, можливо, близько 50%  застосунка
використовується час від часу, не дуже круто завантажувати всі дані перекладів для всього застосунка
просто не іншій мові.

Нам потрібен спосіб завантажувати дані перекладу для певного модуля, який працює в даний момент. Це
значить, що при зверненні до підмодуля `home`, ми хочемо завантажити переклад тільки для модуля
`home`. Якщо ми змінюємо мову, ми теж хочемо завантажувати переклад тільки для модуля `home`.

В додаток до цього, якщо ми завантажили дані перекладу для, скажімо, трьох різних модулів, змінили
мову, і потім знову повернули мову на вже завантажену, нам не хочеться завантажувати дані знову, бо
ми їх вже завантажували раніше.

Так, це те, про що необхідно потурбуватися, якщо нам потрібне завантаження по частинам. Тим не
менше, `angular-translate` передбачив це. Тут у гру вступає `partialLoader`.

Ви можете встановити його як і будь-який інший завантажувач просто використовуючи Bower:

```
$ bower install angular-translate-loader-partial
```

Використовуючи `partialLoader` вам необхідно подумати про шаблон, який `angular-translate` буде
використовувати для завантаження перекладів. Це схоже на `staticFilesLoader`, але трохи більш
специфічно. Вам необхідно вказати властивості `part` і `lang`, де `part` означає частину вашого
застосунка (наприклад, `home`), і `lang` - ключ потрібної мови.

Давайте припустимо, що ми структурували наші файлі перекладів по модулям і вони виглядають так:

```
/i18n/home/en.json
/i18n/home/de.json
/i18n/contact/en.json
/i18n/contact/de.json
```

Цілком логічно, так? Тепер, коли ми знаємо як структуровані наші дані, ми можемо налаштувати
`$translateProvider` на використання завантажувача з таким шаблоном:

<pre>
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json'
});
</pre>

Практично готово! Звісно, `angular-translate` повинен знати яку мову використовувати, тому ми додамо
наступне:

<pre>
$translateProvider.preferredLanguage('en');
</pre>

В принципі, нічого нового. Далі, як `angular-translate` дізнається яку "частину" завантажувати? Якщо
коротко - ніяк. Вам необхідно сказати `angular-translate` **коли** необхідно завантажувати **яку
частину**.

У `partialLoader` є `провайдер`, що призначений для налаштування початкового стану завантажувача.
Для використання цього провайдера нам необхідно впровадити його в функцію налаштування:

<pre>
angular.module('main')
.config(function ($translateProvider, $translatePartialLoaderProvider) {

});
</pre>

Чудово. Тепер, щоб сказати `angular-translate`, яку частину він повинен завантажити ми
використовуємо `addPart()` метод `$translaterPartialLoaderProvider`'а. Це виглядає приблизно так:

<pre>
$translatePartialLoaderProvider.addPart('home');
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json'
});
$translateProvider.preferredLanguage('en');
</pre>

Як бачите, вся функціональність для завантаження перекладів по частинам знаходиться в завантажувачі,
а не в самому `angular-translate`. Тепер шаблон завершений і `angular-translate` викличе
завантажувач, як тільки це стане можливо.

Добре, це процес ініціалізації, але як щодо часу виконання? Що як користувач зайшов в модуль
`contact` і хоче завантажити переклад для цього модуля?

`$translatePartialLoaderProvider` налаштовує `$translatePartialLoader`, а, значить, ви можете
впровадити `$translatePartialLoader` у ваші контролери і сервіси. Але навіщо  це потрібно? Так як
ви можете додати частину перекладу в завантажувач з допомогою провайдера, ви можете зробити це і з
допомогою сервісу для маніпулювання станом завантажувача під час виконання. Це означає, що ви можете
просто впровадити завантажувач і використовувати його для додавання додаткових частин перекладу.

Скажімо, в нашому модулі `contact` є `ContactCtrl`, тоді це може виглядати наступним чином:

<pre>
angular.module('contact')
.controller('ContactCtrl', function ($scope, $translatePartialLoader) {
  $translatePartialLoader.addPart('contact');
});
</pre>

Це не важко, так? Тут ми маніпулюємо станом завантажувача під час виконання. Це гарантує, що
angular-translate завантажить специфічні дані перекладу тоді, коли ми цього дійсно захочемо. Як
тільки ми додали нову частину, `$translatePartialLoader` викличе подію
`$translatePartialLoaderStructureChanged`.

До цього моменту не було завантажено ніяких додаткових даних! `angular-translate` нічого не знає про
стан завантажувача, тому вам необхідно сказати йому **оновити** таблиці перекладів. Оновлення
таблиць перекладів видаляє і знову завантажу їх. По суті, все що вам потрібно для завантаження по
частинам - це маніпулювати станом завантажувача, кажучи які частини додати, і потім оновлювати
таблиці перекладів. При зміні стану завантажувача нові частини будуть завантажені при його
наступному виклику.

Отже, нам просто треба додати:

<pre>
angular.module('contact')
.controller('ContactCtrl', function ($scope, $translatePartialLoader, $translate) {
  $translatePartialLoader.addPart('contact');
  $translate.refresh();
});
</pre>

Для автоматизації процесу ви можете використати подію `$translatePartialLoaderStructureChanged`.
Просто прослуховуйте його з допомогою `$rootScope` і оновлюєте таблиці перекладів кожного разу,
коли воно викликається.

<pre>
app.run(function ($rootScope, $translate) {
  $rootScope.$on('$translatePartialLoaderStructureChanged', function () {
    $translate.refresh();
  });
});
</pre>

Так як `$translate.refresh()` повертає обіцянку, це чудово працює  як з модулем `ngRoute`, так і з
UI Router.

Цікавим є питання боротьби з помилками завантаження. За замовчуванням завантажувач відкидає весь
процес завантаження, якщо будь-яка з частин не була завантажена з сервера. Але ви можете трохи
змінити цю поведінку. Завантажувач дозволяє вказати обробник помилок - сервіс, який буде
викликатися, якщо яка-небудь частина не може бути завантажена. У даному сервісі ви можете робити
все, щоб обробляти такі ситуації.

Є кілька речей, які ви повинні знати, перш ніж ви зможете створити ваш перший обробник помилок:

1) Завантажувач розраховує, що обробник помилок має наступну сигнатуру
`function (part:String, langKey:String):Promise`
2) Ви повинні або вирішити обіцянку з таблицею перекладу для даних частини та мови або відхилити її
3) Завантажувач буде використовувати дану таблицю перекладу так само, ніби вона була успішно
отримана з сервера
4) Якщо ви відкинете обіцянку, то завантажувач відкине весь процес завантаження

Ось приклад простого обробника помилок:

```js
angular.module('translation')
.factory('MyErrorHandler', function ($q, $log) {
  return function (part, lang) {
    $log.error('The "' + part + '/' + lang + '" part was not loaded.');
    return $q.when({});
  };
});
```

Отже, тепер все, що ми повинні зробити, це сказати завантажувачу назву сервісу, який він повинен
використовувати в якості обробника помилок:

<pre>
$translateProvider.useLoader('$translatePartialLoader', {
  urlTemplate: '/i18n/{part}/{lang}.json',
  loadFailureHandler: 'MyErrorHandler'
});
</pre>

## Відкладене завантаження в час виконання

Як тільки ваш застосунок завантажиться, він асинхронно завантажить необхідні дані перекладів. Окей,
круто. Але що, як користувач хоче змінити мову, а відповідні дані перекладів ще не завантажені?

В розділі [Багатомовність](#/guide/07_multi-language) ви дізналися як можна змінювати мову під час
виконання з допомогою `$translate.use()`. Знаєте що? Використання асинхронних завантажувачів нічого
не змінює. `$translate.use()` перевіряє чи присутня таблиця перекладів для даного ключа мови, і,
якщо ні, буде викликаний зареєстрований завантажувач для її отримання. Відкладене завантаження в
найкращому вигляді!

**Увага**: Відмітьте, що при використанні `partialLoader` вам треба спочатку оновити таблиці
перекладів!

## Налаштування завантажувача

У будь-який завантажувач можна передати налаштування. для цього використовується такий синтаксис:

<pre>
$translateProvider.useLoader('customLoader', {
  settingA: 'foobar'
});
$translateProvider.useStaticFilesLoader({
  $http: {
    method: 'POST'
  }
});
</pre>

Властивість `$http` буде використана завантажувачем під час запиту, проте атрибут `cache` може бути
перевизначений (см. следующий раздел).

## Використання кеша

Для контролю над кешуванням в існуючих завантажувачах можна використовувати об'єкт cache. Докладніше
про це Ви можете прочитати в
[офіційній документації AngularJS](https://docs.angularjs.org/api/ng/type/$cacheFactory.Cache).

Для увімкнення стандартного кешування використовується наступний метод:

<pre>
$translateProvider.useLoaderCache(true); // default is false which means disable
</pre>

Якщо ж у Вас вже є єкземпляр кеша (спеціально налаштований), то прив'яжіть його так:

<pre>
$translateProvider.useLoaderCache(yourSpecialCacheService);
</pre>

Angular-Translate також підтримує ліниве зв'язування. Тому, такий варіант також буде працювати:

<pre>
$translateProvider.useLoaderCache('yourSpecialCacheService');
</pre>

Екземпляр під назвою `yourspecialCacheService` буде знайдено при необхідності.

## МНПК - Миготіння не перекладеного контента

У використання асинхронних завантажувачів для отримання перекладів є один недолік. При запуску
застосунку є невеликий проміжок часу, коли можливе миготіння через те, що дані перекладів ще не
завантажені. Це не баг angular-translate, а, скоріше, цілком логічна поведінка, оскільки ми
виконуємо дії асинхронно.

Щоб обійти це, ви можете визначити хоча б одну мову **в** застосунку, без необхідності завантажувати
її асинхронно. Якщо ваш застосунок використовує наперед визначену мову за замовчування, то при
використанні `$translateProvider.preferredLanguage()` МНПК проявлятися не буде, бо мова, що
використовується, вже присутня.

Просто використовуйте комбінацію з `$translateProvider.translations()` і
`$translateProvider.{{який-небудь}}Loader` ось так:

<pre>
$translateProvider.translations('en', {
    'HELLO_TEXT': 'Hello World!'
});
$translateProvider.useStaticFilesLoader({
    'prefix': 'locale-',
    'suffix': '.json'
});
$translateProvider.preferredLanguage('en');
</pre>

**Примітка:** Користувач Angular-Translate поділився хорошим рішенням цієї проблеми
[за допомогою Grunt](https://github.com/angular-translate/angular-translate/issues/921).

Давайте оновимо наш навчальний застосунок таким чином, щоб використовувати асинхронний завантажувач!
Скористаємося staticFilesLoader. Для початку ми повинні вилучити таблиці перекладів з коду і
помістити їх в окремі файли:

**Примітка:** Тепер дані представлені у вигляді _JSON_, тому все повинно бути заключено у подвійні
лапки! Також, переконайтеся, що ви НЕ скопіювали коментарі і налаштували сервер на відправку JSON як
JSON, а не як звичайний текст!

<pre>
// locale-en.json
{
  "HEADLINE": "What an awesome module!",
  "PARAGRAPH": "Srsly!",
  "PASSED_AS_TEXT": "Hey there! I'm passed as text value!",
  "PASSED_AS_ATTRIBUTE": "I'm passed as attribute value, cool ha?",
  "PASSED_AS_INTERPOLATION": "Beginners! I'm interpolated!",
  "VARIABLE_REPLACEMENT": "Hi {{name}}",
  "BUTTON_LANG_DE": "German",
  "BUTTON_LANG_EN": "English"
}
</pre>

<pre>
// locale-de.json
{
  "HEADLINE": "Was für ein großartiges Modul!",
  "PARAGRAPH": "Ernsthaft!",
  "PASSED_AS_TEXT": "Hey! Ich wurde als text übergeben!",
  "PASSED_AS_ATTRIBUTE": "Ich wurde als Attribut übergeben, cool oder?",
  "PASSED_AS_INTERPOLATION": "Anfänger! Ich bin interpoliert!",
  "VARIABLE_REPLACEMENT": "Hi {{name}}",
  "BUTTON_LANG_DE": "deutsch",
  "BUTTON_LANG_EN": "englisch"
}
</pre>

Далі з допомогою `$translateProvider` ми налаштовуємо сервіс `$translate`:

<pre>
// configures staticFilesLoader
$translateProvider.useStaticFilesLoader({
  prefix: 'data/locale-',
  suffix: '.json'
});
// load 'en' table on startup
$translateProvider.preferredLanguage('en');
$translateProvider.useLocalStorage();
</pre>

Оскільки нам не потрібно вносити зміни в контролери або HTML, все готово! Подивіться на працюючий
застосунок:

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.translations('en', {
          "HEADLINE": "What an awesome module!",
          "PARAGRAPH": "Srsly!",
          "PASSED_AS_TEXT": "Hey there! I'm passed as text value!",
          "PASSED_AS_ATTRIBUTE": "I'm passed as attribute value, cool ha?",
          "PASSED_AS_INTERPOLATION": "Beginners! I'm interpolated!",
          "VARIABLE_REPLACEMENT": "Hi {{name}}",
          "BUTTON_LANG_DE": "German",
          "BUTTON_LANG_EN": "English"
        });
        // configures staticFilesLoader
        $translateProvider.useStaticFilesLoader({
          prefix: 'data/locale-',
          suffix: '.json'
        });
        // load 'en' table on startup
        $translateProvider.preferredLanguage('en');
        $translateProvider.useLocalStorage();
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Відкрийте інструменти розробника вашого браузера і подивіться на мережеву активність при зміні мови.
Тепер наш застосунок завантажує дані перекладів асинхронно! В наступному розділі ви дізнаєтеся про
те, як створювати **ваші власні користувацькі завантажувачі**.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
