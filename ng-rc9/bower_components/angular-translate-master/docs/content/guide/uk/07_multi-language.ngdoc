@ngdoc overview
@name Багатомовність
@description

# Багатомовність

В розділі [Підстановка змінних](#/guide/06_variable-replacement) ви навчилися як передавати
динамічні значення через різноманітні компоненти для використання їх у перекладах. Оскільки ми
покрили всю базову функціональність, що надається цими компонентами (використовуючи стандартний
сервіс інтерполяції), тепер ми готові перейти на наступний рівень: **підтримка багатомовності**.

Звісно, дуже добре знати як користуватися компонентами angular-translate, але все стає куди
цікавіше, коли необхідно навчити застосунок кільком мовам (для чого, власне, цей модуль і
призначений!). То ж, давайте почнемо вивчати як додавати одразу кілька таблиць перекладів!

## Навчання застосунку новим мовам

В розділі [Початок роботи](#/guide/02_getting-started) ви дізналися як додати у застосунок таблицю
перекладу, використовуючи метод `translations()` `$translateProvider`'а. Той же метод можна
використовувати для одночасного додавання великої кількості таблиць перекладів. Таблиці перекладу,
що передаються, повинні при цьому супроводжуватися ключем мови (language key) з допомогою якого
angular-translate розрізняє, яка таблиця перекладів відноситься до якої мови.

Додати таблицю перекладів із відповідним ключем дуже просто. Замість того, щоб просто віддати
таблицю в метод `translations()`, можна першим аргументом передати ключ мови, а таблицю перекладів -
другим. Таким чином, додавання таблиці перекладів з ключем мови виглядає так:

<pre>
// registers translation table with language key 'en'
$translateProvider.translations('en', {
  GREETING: 'Hello world!'
});
</pre>

Тепер, для додавання другої таблиці перекладів для іншої мови (скажімо, німецької), зробіть те ж
саме з іншим ключем мови:

<pre>
// registers translation table with language key 'de'
$translateProvider.translations('de', {
  GREETING: 'Hallo Welt!'
});
</pre>

Легко? Ваш застосунок тепер знає дві різні мови. Ви можете додавати стільки мов, скільки потрібно -
ліміту немає. Однак, оскільки тепер доступно дві мови, яку з них повинен використовувати застосунок?
angular-translate не віддасть переваги якій-небудь мові поки ви не скажете йому це зробити.

## Вибір мови для використання

Оскільки ми зареєстрували більше однієї таблиці перекладів, `angular-translate` повинен знати яку з
них потрібно використовувати. Тут вступає в силу новий метод провайдера `$translateProvider`.
`preferredLanguage()` каже angular-translate яка з зареєстрованих мов повинна бути використана за
замовчуванням. Він очікує ключ мови, який вказує на певну таблицю перекладів. Таким чином, щоб
сказати застосунку, що він повинен використовувати німецьку, а не англійську у якості першої мови,
розширте код наступним чином:

<pre>
// tells angular-translate to use the German language
$translateProvider.preferredLanguage('de');
</pre>

**Замітка:** Також для цього можна використовувати метод `$translateProvider.use()`, оскільки він
також встановлює мову. Однак виявилося, що це погана практика при використанні асинхронних
завантажувачів в комбінації зі сховищем. В деяких випадках може вийти так, що angular-translate
зробить два асинхронних запити. Пізніше ви ознайомитеся з цим більш детально. Щоб обійти цю проблему
ми ввели `preferredLanguage()`. Вам слід завжди використовувати `preferredLanguage()` замість
`use()` при роботі з `$translateProvider`.

## Автоматичне визначення бажаної мови

Починаючи з версії `2.0` `$translateProvider` має метод `determinePreferredLanguage()`. Цей метод
намагається самостійно визначити бажану мову для застосунку. Він шукає значення у наступних
властивостях об'єкту `window.navigator` (у відповідному порядку):

- `navigator.languages[0]`
- `navigator.language`
- `navigator.browserLanguage`
- `navigator.systemLanguage`
- `navigator.userLanguage`

Таким чином, замість виклику `$translateProvider.preferredLanguage(langKey)`, ви можете зробити так:

<pre>
// try to find out preferred language by yourself
$translateProvider.determinePreferredLanguage();
</pre>

Будь ласка, використовуйте цей метод на свій власний ризик! Знайте, що кожен браузер може повернути
різне значення цих властивостей.

Якщо це не задовольняє ваших потреб, ви можете додатково передати функцію, що визначає ключ бажаної
мови.

<pre>
$translateProvider.determinePreferredLanguage(function () {
  var preferredLangKey = '';
  // some custom logic's going on in here
  return preferredLangKey;
});
</pre>

## Зміна мови під час використання

Для зміни мови під час використання сервіс `$translate` має метод `use()` який або повертає ключ
мови, що використовується в даний момент, або, у випадку передачі у якості аргументу ключа мови,
каже angular-translate використовувати відповідну мову. `$translate.use()` всередині також викликає
асинхронні завантажувачі при спробі використання мови, для якої ще не завантажена таблиця
перекладів. Але більш докладно про це в розділі
[Асинхронне завантаження](#/guide/10_asynchronous_loading).

Гарним використання `$translate.use()` було б в контролері, який керує зміною мови. Вам просто
необхідно в області видимості реалізовувати функцію, що приймає ключ мови, і використати її для
того, щоб змінити мову.

<pre>
angular.module('myApp').controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };

}]);
</pre>

Щоб відчути як це буде працювати в застосунку ми оновимо наш приклад відповідним чином. По-перше, ми
додамо таблицю перекладів для німецької мови і два нових ідентифікатора перекладів для кнопок, що
будуть додані пізніше:

<pre>
var translationsEN = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'German',
  BUTTON_LANG_EN: 'English'
};

var translationsDE= {
  HEADLINE: 'Was für ein großartiges Modul!',
  PARAGRAPH: 'Ernsthaft!',
  PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
  PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
  PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
  VARIABLE_REPLACEMENT: 'Hi {{name}}',
  BUTTON_LANG_DE: 'Deutsch',
  BUTTON_LANG_EN: 'Englisch'
};
</pre>

Після цього ми оновимо додавання англійської таблиці перекладів вказавши відповідний ключ мови і
скажемо angular-translate використовувати англійську за замовчуванням:

<pre>
$translateProvider.translations('en', translationsEN);
$translateProvider.translations('de', translationsDE);
$translateProvider.preferredLanguage('en');
</pre>

Круто! Тепер на потрібні елементи управління для зміни мови під час виконання. Ми оновимо наш HTML
і додамо кнопку для кожної мови. Також, для кожної кнопки ми використаємо директиву `ng-click`, яка
викликає функцію зміни мови:

<pre>
<button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
<button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
</pre>


Нарешті, ми повинні реалізувати відповідну функцію в області видимості нашого контролера:

<pre>
app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

  $scope.changeLanguage = function (langKey) {
    $translate.use(langKey);
  };
}]);
</pre>

Вуаля! Тепер у нас є застосунок, що підтримує багато мов:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        MISSING_TRANSLATION: 'Oops! I have not been translated into German...',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        // MISSING_TRANSLATION is ... missing :)
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        $translateProvider.fallbackLanguage('en');
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
      <p translate>MISSING_TRANSLATION</p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
