@ngdoc overview
@name Підстановка змінних
@description

# Підстановка замінних

Це керівництво покаже вам як бути з підстановкою змінних у перекладах. Якщо ви ще не прочитали
ввідні розділи про [сервіс $translate](#/guide/03_using-translate-service),
[фільтр translate](#/guide/04_using-translate-filter) і
[директиву translate](#/guide/05_using-translate-directive), то саме час це зробити!

Сервіс `$translate`, фільтр `translate` і директива `translate` дають дуже точні результати! Але як
бути, якщо ваші переклади потребують наявності змінних значень? Скажімо, ви хочете показати
повідомлення з текстом накшталт '_Ви отримали n листів_', де _n_ - це плейсхолдер для значення, що
змінюється, яке може бути будь-яким числом.

Що ж, `angular-translate` допоможе вам. Вводити змінні в переклади, використовуючи стандартний
сервіс інтерполяції angular-translate, дуже просто. Так, ви прочитали правильно. Те, як обробляються
змінні в перекладах, залежить від сервісу інтерполяції, що використовується.

## Використання змінних в перекладах

Використовуючи стандартний сервіс інтерполяції angular-translate, ви можете просто покластися на
синтаксис сервісу інтерполяції Angular. Таким чином, все, що необхідно для того, щоб визначити
змінну в перекладі - це використати директиву інтерполяції (interpolate directive) Angular.

```
{
  "TRANSLATION_ID": "{{username}} is logged in."
}
```

Тут `username` виступає у ролі ідентифікатору, на місце якого ви зможете передати змінне значення.
Але як же передати ці значення через компоненти модуля angular-translate?

## Підстановка змінних в сервісі $translate

Ви можете передати значення змінних через сервіс `$translate`, використовуючи його другий аргумент.
Сервіс `$translate` у якості другого аргументу приймає хеш об'єкту JavaScript, який використовується
для інтерполяції перекладів. Таким чином, якщо у нас є ідентифікатор перекладу на подобі того, що
описаний вище, передача значення для `username` буде виглядати так:

<pre>
$translate('TRANSLATION_ID', { username: 'PascalPrecht' });
</pre>

Якщо ж ідентифікатор перекладу містить більше змінних, просто розширте хеш об'єкту, що передається
відповідними парами ключ-значення.

<pre>
$translate('TRANSLATION_ID', {
  username: 'PascalPrecht',
  lastLogin: '2013-07-21 6:50PM'
});
</pre>

## Підстановка змінних у фільтрі translate

Так як фільтр `translate` використовує сервіс `$translate`, нам просто потрібен спосіб передачі
динамічних значень через фільтр, щоб у результаті отримати хеш об'єкту для сервісу. Для досягнення
цього необхідний спеціальний синтаксис тому, що фільтри в Angular на даний момент не спроможні мати
іменовані параметри. То ж, ми маємо два шляхи передачі значень через фільтр `translate`.

Перший шлях - це передача літерала об'єкта у вигляді рядка. В подальшому він буде інтерпольований
сервісом `$translate`.

<pre>
{{ 'TRANSLATION_ID' | translate:'{ username: "PascalPrecht" }' }}
</pre>

Не так вже і складно, правда? Але, що як `username` не може мати фіксованого значення і теж має бути
інтерпольоване перед тим, як буде передане? Єдиним шляхом досягнення цього є передача через фільтр
об'єкта з області видимості (scope) як виразу Angular. Це також означає, що маєте прив'язати (bind)
ваші змінні значення для перекладів у контролері, який відображає значення в область видимості.

<pre>
angular.module('myApp').controller('Ctrl', ['$scope', function ($scope) {

  $scope.translationData = {
    username: 'PascalPrecht'
  };
}]);
</pre>

І потім передати його у вигляді виразу через фільтр:

<pre>
{{ 'TRANSLATION_ID' | translate:translationData }}
</pre>

## Підстановка змінних в директиві translate

Звісно, ви можете зробити те ж саме і з директивою `translate`. У директиви `translate` є
необов'язковий атрибут `translate-values`, який ви можете використовувати для передачі яких-небудь
значень. Все, що вам необхідно зробити - це використовувати директиву разом з атрибутом
`translate-values`.

Ви можете використовувати літерал об'єкта у вигляді рядка, вираз, і директиву інтерполяції (якщо
значення динамічне). Передане значення буде оцінене і розібране фільтром так, що в результаті
вийде простий об'єкт JavaScript, який буде передано сервісу `$translate`.

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values='{ username: "PascalPrect"}'></ANY>
</pre>

або

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values='{ username: someScopeObject.username }'></ANY>
</pre>

або

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values="{{translationData}}"></ANY>
</pre>

## Користувацькі атрибути для передачі значень

Починаючи з версії `2.0` директива `translate` надає ще одну корисну можливість для передачі значень
у ваші переклади. Ми щойно дізналися як використовувати атрибут `translate-values`, але у деяких
випадках наш код міг би бути трохи більш декларативним. Що як ми хочемо передати одне чи два
значення, але вказати це безпосередньо в HTML?

Що ж, в angular-translate `>=2.0` можете це зробити. Ви можете визначати ваші власні
`translate-value-*` атрибути.

Тож, як це працює? Дуже просто!

Скажімо, в нас є такий ідентифікатор перекладу:

<pre>
{
  "GREETING": "Hi, my name is {{name}}"
}
</pre>

І ми хочемо перекласти його з допомогою директиви `translate`. Ми можемо це зробити, але цього разу
ми будемо використовувати користувацький атрибут `translate-value-*` для передачі значення в наш
переклад. Ось як це працює:

<pre>
<p translate="GREETING" translate-value-name="Pascal"></p>
</pre>

Все, що потрібно - це використовувати префікс `translate-value-` перед назвами змінних з вашого
перекладу (в даному випадку `name`).

І, звісно, ви можете використовувати їх з інтерпольованими значеннями також:
<pre>
<p translate="GREETING" translate-value-name="{{name}}"></p>
</pre>

Якщо це не круто, переконали.

Здорово! Тепер ми можемо використовувати змінні в наших перекладах! Давайте оновимо наш навчальний
застосунок. Ми розширили таблицю перекладів таким чином:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
  VARIABLE_REPLACEMENT: 'Hi, {{name}}'
};
</pre>

Далі ми передали name через директиву `translate`:

<pre>
<p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
</pre>

Наш працюючий код тепер виглядає так:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi, {{name}}'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht'}"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
