@ngdoc overview
@name Початок роботи
@description

# Початок роботи

## Початковий HTML
Щоб розпочати роботу, підключіть angular-translate у свій HTML документ. Звісно, це потрібно зробити
**після** того, як буде підключено сам Angular. Ваш HTML має виглядати так:

<pre>
<html>
  <head>
    <meta charset="utf-8">
    <title>i18n app</title>

    <script src="path/to/angular.js"></script>
    <script src="path/to/angular-translate.js"></script>
    <script src="app.js"></script>
  </head>

  <body ng-app="myApp">

  </body>
</html>
</pre>

## Оголошення залежностей
Після підключення ви можете оголосити angular-translate у якості залежності для вашого застосунку.
Просто чудово, що Angular надає цей механізм. Так, щоб сказати вашому застосунку, що для правильної
роботи йому потрібен angular-translate, впровадьте його у модуль як показано нижче. Це дасть вам 
доступ до всіх компонентів angular-translate.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

## Знайомство з `$translateProvider`

Тепер angular-translate оголошений як залежність, а це значить, що ми маємо доступ до всіх його
компонентів. Коли справа доходить до налаштування різноманітних сервісів, які ви хочете 
використовувати у своєму застосунку, Angular слідує досить простій архітектурі. Просто погляньте на
наступний код.

Впевнений, ви вже бачити щось у цьому роді:

<pre>
app.config(function ($locationProvider) {
  $locationProvider.html5Mode(true);
});
</pre>

Або, може, налаштування сервісу `$route`:

<pre>
app.config(function ($routeProvider) {
  $routeProvider.when('/something', {
    templateUrl: 'url/to/template',
    controller: 'SomeFancyCtrl'
  });
});
</pre>

Те, що тут відбувається, це не _використання певних сервісів_ для налаштування яких-небудь речей.
Це, скоріше, _налаштування певного сервісу_, який надалі буде використаний у вашому застосунку, за
допомогою _провайдера_. Це означає, що `$locationProvider.html5Mode(true)` налаштовує **сервіс**
`$location` на роботу в режимі html5. Таким чином, якщо сервіс може бути налаштований зовні, він
потребує відповідного провайдера, що надає необхідний для цього інтерфейс.

angular-translate поставляється з провайдером `$translateProvider`, який можна використовувати для
налаштування сервісу `$translate`, що обробляє матеріали i18n у вашому застосунку. Сервіс 
`$translate` у свою чергу використовується директивами і фільтрами, які ви можете використовувати у
будь-якому місці вашого застосунку. Для того, щоб сервіс `$translate` переклав контент, йому 
потрібно знати які переклади взагалі існують.

Тут у гру вступає `$translateProvider`. Він надає методи, що надають можливість навчити ваш 
застосунок різним мовам і змусити сервіс `$translate` використовувати їх.

## Навчання мовам

Навчити ваш застосунок мові за допомогою `$translateProvider` дуже просто. Для початку ви повинні
впровадити провайдер у функцію налаштування вашого модуля (єдине місце, де ви можете отримати до
нього доступ).

<pre>
app.config(['$translateProvider', function ($translateProvider) {

}]);
</pre>

Тепер, для додавання мови ви повинні зробити так, щоб `$translateProvider` дізнався про **таблицю
перекладів**. Що це означає? Насправді все дуже просто. angular-translate розглядає таблиці 
перекладів як JSON об'єкти. Таким чином, все, що від вас потрібно - це надати інформацію про
переклади у вигляді хеш-об'єкту JavaScript, або, у випадку віддаленого завантаження, у вигляді 
об'єкту JSON. Ось приклад того, як може виглядати таблиця перекладів:

```json
{
  "TRANSLATION_ID": "This is a concrete translation for a specific language."
}
```

Наведена вище таблиця перекладів містить всього лише один переклад. Як бачите, ключ являє собою
ідентифікатор перекладу, в той час як значення відображає конкретний переклад для деякої мови. Вам
навіть немає необхідності вказувати у таблиці мову, до якої вона відноситься. Але про це пізніше.

Ви також можете організувати ваші переклади включаючи їх у простори імен. Це особливо цікаво для 
великих сайтів з великою кількістю сторінок. Все, що вам необхідно зробити, це створити вкладені
JSON об'єкти:

```json
{
  "NAMESPACE": {
    "SUB_NAMESPACE": {
       "TRANSLATION_ID1": "This is a namespaced translation."
    }
  }
}
```

Ця таблиця містить всього один переклад, але її дуже просто розширити. Вам доступні різні рівні
вкладеності у вашій таблиці перекладів, і кожний простір імен може містити скільки завгодно 
вкладених, що робить її дуже гнучкою у використанні!

## Скорочення та посилання
Скорочення та посилання - дуже корисні особливості, що стали доступні з версії `1.1.1`. Скажімо,
в нас є така таблиця перекладів:

```json
{
  "bar": {
    "foo": {
      "foo": "This is my text."
    }
  }
}
```

Щоб отримати доступ до цього ідентифікатора перекладу, треба написати `bar.foo.foo`. Це добре, але
можна зробити краще. angular-translate достатньо розумний і розуміє, коли простір імен містить
ідентифікатор перекладу з такою ж назвою. Якщо це ваш випадок, тоді для доступу до ідентифікатора
можна скористатися скороченням - просто вказати на простір імен замість ідентифікатора перекладу. Це
можливо завдяки тому, що простір імен може містити всього один ідентифікатор з таким самим ім'я.

Таким чином, ви можете отримати доступ до вказаного вище ідентифікатора перекладу за допомогою
скорочення `bar.foo`. Правда круто?

Іншою корисною особливістю angular-translate є можливість в таблиці перекладів посилатися в одному
ідентифікаторі перекладу на інший. Уявімо, що в нас є така таблиця перекладів:

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "OK"
  }
}
```

Як бачите, ми створили два простори імен, і обидва вони містять текст, що просто каже "OK". Такий
випадок не рідкість, якщо задуматися про кнопки підтвердження або щось схоже в застосунку. Однак,
очевидно, що такі речі можуть призвести до надмірності. А ми, як розробники, не любимо надмірність,
чи не так?

Якщо два ідентифікатори перекладу завжди будуть містити однаковий текст, можна просто зробити
посилання з одного ідентифікатора на інший. Щоб зробити посилання, треба написати `@:` і повну назву
ідентифікатора перекладу, на який ви посилаєтеся, вказавши, в тому числі, і простір імен. Отже,
приклад вище можна змінити так:

```json
{
  "SOME_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "ANOTHER_NAMESPACE": {
    "OK_TEXT": "@:SOME_NAMESPACE.OK_TEXT"
  }
}
```

## Іііі, почали!

Давайте додамо таблицю перекладів у наш застосунок. `$translateProvider` надає для цього метод під
назвою `translations()`. Припустимо, що в нас є наступна таблиця перекладів:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  NAMESPACE: {
    PARAGRAPH: 'And it comes with awesome features!'
  }
};
</pre>

Ми можемо додати її за допомогою `$translateProvider.translations()`:

<pre>
app.config(['$translateProvider', function ($translateProvider) {
  // add translation table
  $translateProvider
    .translations('en', translations)
    .preferredLanguage('en');
}]);
</pre>

У цілому, це все, що необхідно зробити. Просто вкажіть ключ мови та додайте для неї таблицю 
перекладу. Після цього скажіть angular-translate яку мову йому слід використовувати. Оскільки ми 
додаємо таблицю на етапі налаштування, сервіс `$translate` зможе отримати до неї доступ як тільки 
буде ініціалізований і використаний. Ось працюючий код:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);
    </script>
    <div>
      <h1>Nothing to see here yet!</h1>
      <p>But we'll change it now</p>
    </div>
  </doc:source>
</doc:example>

Тепер ваш застосунок готовий до локалізації! У наступному розділі ви дізнаєтеся як користуватися
директивою і фільтром, що надаються angular-translate, для інтерполяції ваших перекладів.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
