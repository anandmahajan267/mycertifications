@ngdoc overview
@name Директива translate
@description

# Директива translate

Іншим способом перекладу контента у шарі представлення є використання директиви `translate`.
Використання фільтру, звісно, чудово, але директива - краще. Виявилось, що наявність великої
кількості фільтрів у представленні призводить до великої кількості спостерігаючих виразів (watch
expressions). Тому, `angular-translate` також надає директиву для перекладу контента у шарі
представлення.

## Використання
Ви можете використовувати директиву `translate` різними способами. Ось як виглядає звичайне
використання:

```
<ANY translate>TRANSLATION_ID</ANY>
```

Також ви можете передати ідентифікатор перекладу у якості значення атрибута директиви `translate`:

```
<ANY translate="TRANSLATION_ID"></ANY>
```

Навіть якщо це вже дуже гнучкий спосіб використання директиви, angular-translate пропонує **інший**
спосіб її використання. Давайте припустимо, що ідентифікатор перекладу не доступний у якості
конкретного ідентифікатору тому, що, наприклад, він знаходиться всередині циклу по набору даних, що
містить ідентифікатор перекладу у кожному ітераторі. В такому випадку ідентифікатор перекладу
доступний лише у вигляді динамічних даних. Фактично, спочатку треба інтерполювати безпосередньо сам
ідентифікатор. angular-translate допоможе вам із цим. Так теж можна:

```
<ANY translate="{{toBeInterpolated}}"></ANY>
```

Ну хіба ж це не круто? І так, angular-translate не був би angular-translate, якщо не міг би зробити
те ж саме з нашим першим прикладом використання. Це теж працює:

```
<ANY translate>{{toBeInterpolated}}</ANY>
```

Оберіть, що краще для вас!

## Пост компіляція
Починаючи з версії 2, до перекладів може бути застосована пост обробка в контексті поточної області
видимості (з використанням `$compile`). Це означає, що будь-яка директива, що використовується в
тексті перекладу, тепер працювати як очікується.

Цю поведінку можна включити для директиви:

```
<ANY translate="TRANSLATION_ID" translate-compile></ANY>
```

Також, ви можете включити цю функцію глобально за допомогою...

```
$translateProvider.usePostCompiling(true);
```

... і потім вимкнути її знову для директиви:

```
<ANY translate="TRANSLATION_ID" translate-compile="false"></ANY>
```

## Приклад

Давайте оновимо наш навчальний застосунок і додамо деякі нові переклади. Як щодо текстів, що
представляють усі можливі варіанти використання директиви `translate`? наша таблиця перекладів може
виглядати приблизно так:

<pre>
var translations = {
  HEADLINE: 'What an awesome module!',
  PARAGRAPH: 'Srsly!',
  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!'
};
</pre>

Після цього ми оновимо наше представлення додавши у нього нові ідентифікатори перекладів:

<pre>
<h2>{{ 'HEADLINE' | translate }}</h2>
<p>{{ 'PARAGRAPH' | translate }}</p>

<p translate>PASSED_AS_TEXT</p>
<p translate="PASSED_AS_ATTRIBUTE"></p>
<p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
<p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
</pre>

Тепер нова версія нашого застосунка виглядає так:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
