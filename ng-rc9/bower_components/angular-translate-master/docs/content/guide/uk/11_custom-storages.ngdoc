@ngdoc overview
@name Користувацькі сховища
@description

# Користувацькі сховища

Якщо ви читали розділ [Сховища](#/guide/10_storages), то знаєте як використовувати cookiesStorage
і localStorage для того, щоб дати можливість вашому застосунку запам'ятовувати останню обрану мову
між http запитами. Якщо обидва localStorage і cookieStorage вам не підходять, запросто можна
створити свій власний сервіс сховища і використовувати його замість них.

## Створення користувацького сховища

Якщо ви хочете використовувати своє власне сховище у вашому застосунку, вам необхідно створити
сервіс, що реалізує певні методи, щоб angular-translate зміг його використовувати. Інтерфейс для
сервісу сховища дуже простий - він повинен надати методи `put()` і `get()`.

Давайте припустимо, що ми хочемо використовувати користувацький сервіс сховища в нашому застосунку.
Ми легко можемо розширити його новим сервісом. Нам необхідно впевнитися, що ми повертаємо об'єкт з
методами `get()` і `put()`. Користувацький сервіс може виглядати якось так:

<pre>
app.factory('customStorage', function () {
  return {
    put: function (name, value) {
      // store `value` under `name` somehow
    },
    get: function (name) {
      // request value of `name` somehow
    }
  };
});
</pre>

Правда легко? Як бачите, `put()` приймає два аргументи. Ім'я та значення. Таким чином, робота
відбувається з простими парами ключ-значення. З іншого боку, `get()` потребує лише імені для запиту
значення. Надання користувацького сховища у якості окремого сервісу надає вам велику гнучкість коли
мова йде про використання цього сервісу в іншому місці. В додаток до цього, такий сервіс легко
тестувати, бо він ізольований.

## Використання користувацького сховища

Коли ви створили користувацьке сховище, скажіть angular-translate, що він повинен використовувати
його. Методи `useCookieStorage()` і `useLocalStorage()` насправді є скороченнями. Всередині обидва
вони використовують метод `useStorage()`. Ви також можете використовувати цей метод, щоб повідомити
angular-translate про ваш користувацький сервіс просто написавши:

<pre>
$translateProvider.useStorage('customStorage');
</pre>

angular-translate використовує `$injector` для отримання екземпляру фабрики, назву якої було надано
(в нашому випадку це `customStorage`), і, надалі, може використовувати її методи під час виконання
для збереження останньої обраної мови.


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useStorage('customStorage');
      }]);

      app.factory('customStorage', function () {
        return {
          put: function (name, value) {
            // store `value` under `name` somehow
          },
          get: function (name) {
            // request value of `name` somehow
          }
        };
      });

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Звісно, наш користувацький сервіс нічого не робить, через що ви можете перевантажувати браузер так
часто, як побажаєте, але застосунок не запам'ятає мову.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
