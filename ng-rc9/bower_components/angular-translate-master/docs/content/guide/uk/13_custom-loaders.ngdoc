@ngdoc overview
@name Користувацькі завантажувачі
@description

# Користувацькі завантажувачі

angular-translate не був би angular-translate, якщо б не давав можливості створювати власні
користувацькі завантажувачі. В розділі [Асинхронне завантаження](#/guide/10_asynchronous-loading) ви
дізналися як використовувати надані завантажувачі для асинхронного завантаження перекладів з сервера
використовуючи визначені шаблони.

Однак, в деяких випадках цього недостатньо. Можливо, ви захочете використати зовсім інше місце для
збереження перекладів і навіть не захочете завантажувати їх з віддаленого сервера. Тут у гру
вступають користувацькі завантажувачі. Ви можете створювати власні завантажувачі дуже просто і цей
розділ покаже як це зробити!

## Створення користувацького сервісу завантаження

Якщо ні один з наданих завантажувачів не задовольняє вашим потребам, то ви можете зареєструвати
користувацький асинхронний завантажувач у вигляді фабрики. Вона повинна повертати функцію, що
приймає об'єкт, який містить в собі, як мінімум, властивість з ключем мови. З такою архітектурою ви
максимально вільні і маєте повний контроль над поведінкою свого асинхронного завантажувача.

Фабрика користувацького завантажувача може виглядати так:

<pre>
app.factory('customLoader', function ($http, $q) {
    // return loaderFn
    return function (options) {
        var deferred = $q.defer();
        // do something with $http, $q and key to load localization files

        var data = {
            'TEXT': 'Fooooo'
        };

        // resolve with translation data
        return deferred.resolve(data);
        // or reject with language key
        return deferred.reject(options.key);
    };
});
</pre>

Ви повинні впевнитися в тому, що ваша функція-завантажувач повертає обіцянку. Також, воно повинно
бути вирішеним (resolved) з даними перекладу, або відхилене (rejected) з ключем мови. Як бачите, в
об'єкті `options` є властивість `key`. Вона містить ключ мови для якої викликано асинхронний
завантажувач.

## Використання користувацького завантажувача

Ви знаєте, що `$translateProvider` надає методи накшталт `useStaticFilesLoader()` або
`useUrlLoader()`. Обидва вони використовують метод `useLoader()` для реєстрації фабрики
завантажувача, яка в результаті буде викликана `$injector`'ом. Ви можете використовувати той же
метод для свого власного сервіса. Таким чином, для реєстрації користувацького сервісу просто
напишіть:

<pre>
$translateProvider.useLoader('customLoader');
</pre>

angular-translate звернеться до фабрики користувацького завантажувача з допомогою сервісу
`$injector` і зробить для вас все інше.

## Додавання додаткових властивостей

Властивість `options.key` відображає, що `options` - це просто об'єкт. При необхідності ви можете
розширити його додатковими властивостями. Наприклад, може знадобитися наявність у об'єкта `options`
властивості `foo`. Все, що потрібно в цьому випадку - надати цю властивість при реєстрації фабрики
користувацького завантажувача.

Отже, якщо нам необхідна властивість `foo` зі значенням `bar`, то можна передати її так:

<pre>
$translateProvider.useLoader('customLoader', { foo: 'bar' });
</pre>

Після цього, в фабриці завантажувача ви можете отримати до неї доступ через `options.foo`. Не треба
турбуватися про `options.key`, бо його додає сам angular-translate перш, ніж викликати завантажувач.

Щоб показати як це працює, давайте додамо підтримку користувацького завантажувача в наш навчальний
застосунок! Спочатку ми створимо сам завантажувач:

<pre>
app.factory('asyncLoader', function ($q, $timeout) {

  return function (options) {
    var deferred = $q.defer(),
        translations;

    if (options.key === 'en') {
      translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };
    } else {
      translations = {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };
    }

    $timeout(function () {
      deferred.resolve(translations);
    }, 2000);

    return deferred.promise;
  };
});
</pre>

Але що ж він робить? Він використовує сервіс `$timeout` для того, щоб почекати дві секунди і, в
залежності від ключа мови, вирішує нашу обіцянку з англійською або німецькою таблицею перекладів.
Тепер викличемо `$translateProvider.useLoader()` для його використання:

<pre>
$translateProvider.useLoader('asyncLoader');
</pre>

Легко! Ось наш працюючий застосунок з користувацьким завантажувачем!

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.preferredLanguage('en');
        $translateProvider.useLoader('asyncLoader');
      }]);

      app.factory('asyncLoader', function ($q, $timeout) {

        return function (options) {
          var deferred = $q.defer(),
              translations;

          if (options.key === 'en') {
            translations = {
              HEADLINE: 'What an awesome module!',
              PARAGRAPH: 'Srsly!',
              PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
              PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
              PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
              VARIABLE_REPLACEMENT: 'Hi {{name}}',
              BUTTON_LANG_DE: 'German',
              BUTTON_LANG_EN: 'English'
            };
          } else {
            translations = {
              HEADLINE: 'Was für ein großartiges Modul!',
              PARAGRAPH: 'Ernsthaft!',
              PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
              PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
              PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
              VARIABLE_REPLACEMENT: 'Hi {{name}}',
              BUTTON_LANG_DE: 'Deutsch',
              BUTTON_LANG_EN: 'Englisch'
            };
          }

          $timeout(function () {
            deferred.resolve(translations);
          }, 2000);

          return deferred.promise;
        };
      });

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

При зміні мови натисканням на кнопку `German`, застосунок чекає 2 секунди поки обіцянка не буде
вирішена з новими даними перекладів. Як вам таке?

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
