@ngdoc overview
@name Користувацькі інтерполятори
@description

# Користувацькі інтерполятори

Якщо ваших знань достатньо для більш компактної реалізації бібліотеки MessageFormat, або якщо вам
потрібен інший тип інтерполяції, ви можете просто реалізувати свій власний сервіс інтерполяції і
вставити його в angular-translate. Все, що для цього необхідно - це реалізувати спеціальний
інтерфейс, який angular-translate вимагає від сервісу інтерполяції. Давайте подивимося як це працює!

## Створення користувацького сервісу інтерполяції

При створенні користувацького сервісу інтерполяції дії можуть здатися доволі знайомими, якщо ви
читали [Користувацькі сховища](#/guide/11_custom-storages) і
[Користувацькі завантажувачі](#/guide/13_custom-loaders). Все починається зі створення фабрики, що
повертає об'єкт, який реалізує інтерфейс. Сервіс інтерполяції повинен надавати наступні методи:

- `setLocale(langKey)` - встановлює поточну мову
- `getInterpolationIdentifier()` - повертає ідентифікатор інтерполяції
- `interpolate(string, interpolateParams)` - інтерполює рядки з параметрами інтерполяції

Давайте подивимося, як це виглядає при створенні користувацького сервісу інтерполяції. По-перше, ми
реалізуємо інтерфейс:

<pre>
app.factory('customInterpolation', function () {

  return {

    setLocale: function (locale) {

    },

    getInterpolationIdentifier: function () {

    },

    interpolate: function (string, interpolateParams) {

    }
  };
});
</pre>

Це базова структура інтерполяційного сервісу. Тепер давайте додамо трохи логіки, щоб
angular-translate зміг використати його зразу, як тільки наш користувацький сервіс інтерполяції
вступить у гру:

<pre>
app.factory('customInterpolation', function ($interpolate) {

  var $locale;

  return {

    setLocale: function (locale) {
      $locale = locale;
    },

    getInterpolationIdentifier: function () {
      return 'custom';
    },

    interpolate: function (string, interpolateParams) {
      return $locale + '_' + $interpolate(string)(interpolateParams) + '_' + $locale;
    }
  };
});
</pre>

Чудово. Що в нас тут? `setLocale()` просто зберігає значення поточної мови,
`getInterpolationIdentifier()` повертає рядок `custom`. Для чого взагалі це потрібно? Пам'ятаєте як
[тимчасово перевизначити тип інтерполяції](#/guide/14_pluralization#overridinginterpolationtemporarily)?
Саме так. Це ідентифікатор, до якого прив'язується наш сервіс, так що angular-translate знає який
сервіс інтерполяції використовувати коли ви точно перевизначаєте сервіс інтерполяції під час
виконання. `interpolate()` просто використовує сервіс `$interpolate` Angular'а. Крім того, він
додає поточну локаль з боків від переданого рядка.

## Використання користувацького сервісу інтерполяції

Так само, як є методи для Сховищ (`useStorage()`) і Завантажувачів (`useLoader()`), існує і метод
для користувацьких інтерполяцій. `$translateProvider.useInterpolation()` - ваш друг, якщо необхідно
інтегрувати користувацький сервіс у застосунок.

<pre>
$translateProvider.useInterpolation('customInterpolation');
</pre>

Застосунок тепер використовує вашу користувацьку інтерполяцію за замовчуванням. Однак, як ви
пам'ятаєте з попередніх розділів, можна додати її і в якості альтернативної, щоб не втрачати
функціональності Angular:

<pre>
$translateProvider.addInterpolation('customInterpolation');
</pre>

Ось як це виглядає:

<doc:example module="myApp">
  <doc:source>
    <script>
      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        $translateProvider.preferredLanguage('en');
        $translateProvider.useInterpolation('customInterpolation');

        $translateProvider.translations('en', {
          HEADLINE: 'I\'m a headline',
          TEXT: 'I\'m using default interpolation {{ val + val }}',
          PLURAL: '{GENDER, select, male{He} female{She} other{They}} liked this.',
          BUTTON_LANG_EN: 'English',
          BUTTON_LANG_DE: 'German'
        });

        $translateProvider.translations('de', {
          HEADLINE: 'Ich bin eine Überschrift',
          TEXT: 'Ich benutze default interpolation {{ val + val }}',
          PLURAL: '{GENDER, select, male{Er fand} female{Sie fand} other{Sie fanden}} es gut.',
          BUTTON_LANG_EN: 'Englisch',
          BUTTON_LANG_DE: 'Deutsch'
        });
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);

      app.factory('customInterpolation', function ($interpolate) {

        var $locale;

        return {

          setLocale: function (locale) {
            $locale = locale;
          },

          getInterpolationIdentifier: function () {
            return 'custom';
          },

          interpolate: function (string, interpolateParams) {
            return $locale + '_' + $interpolate(string)(interpolateParams) + '_' + $locale;
          }
        };
      });

    </script>
    <div ng-controller="Ctrl">
      <p translate="HEADLINE"></p>
      <p translate="TEXT" translate-values="{ val: 5 }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>


<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
