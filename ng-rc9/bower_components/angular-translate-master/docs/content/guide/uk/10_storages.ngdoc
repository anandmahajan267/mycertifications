@ngdoc overview
@name Сховища
@description

# Сховища

Ви багато дізналися про angular-translate з попередніх розділів. Ми знаємо як можна
[зробити переклади динамічними](#/guide/06_variable-replacement), вивчили
[як додати багато мов](#/guide/07_multi-language). Але все ж є одна річ, що виглядає безглуздо при
використанні нашого застосунку. Кожен раз, заходячи в застосунок, ви повинні натискати на цю
кнопку 'German' знову і знову (звісно, якщо ви німецький користувач як і я!).

То ж, проблема в тому, що наш застосунок не може запам'ятати мову, що була обрана вами при
останньому заході. Цей розділ розповість як навчити ваш застосунок запам'ятовувати мову, яку обрав
користувач.

## Запам'ятовування мови

Для того, щоб застосунок міг запам'ятати мову, в angular-translate є підтримка **Сховищ**. Яке б
сховище ви не використовували, angular-translate збереже в ньому ключ мови під спеціальним
ідентифікатором, так, що він зможе отримати його коли користувач наступного разу зайде в застосунок.

В angular-translate вбудована підтримка двох видів сховищ: **localStorage** і **cookieStorage**.
Також localStorage відкочується до cookieStorage, якщо поточний браузер користувача його не
підтримує. Для використання одного з цих сховищ ви повинні встановити відповідний пакет розширень.

## Використання cookieStorage

Якщо ви хочете використовувати cookieStorage для зберігання мови між http запитами, просто
встановіть розширення cookie storage з допомогою bower:

```
$ bower install angular-translate-storage-cookie
```

Після цього впевніться, що ви включили його в свій HTML документ. Як тільки воно буде включено, ви
зможете використовувати метод `useCookieStorage()` `$translateProvider`'а і angular-translate
подбає про інше.

<pre>
$translateProvider.useCookieStorage();
</pre>

Це просто? angular-translate буде тепер зберігати вихідний ключ мови в цьому сховищі і оновлювати
його як тільки користувач змінить мову.


## Використання localStorage

Якщо ви з будь-яких причин не хочете використовувати cookieStorage, ви можете скористатися
localStorage для досягнення того самого ефекту. Послідовність дій в цілому залишається тією самою.
Ви встановлюєте відповідний пакет розширень і кажете `$translateProvider`'у використовувати
localStorage з допомогою метода `useLocalStorage()`. І знову angular-translate подбає про інше.

Майте на увазі, що localStorage відкочується до cookieStorage, якщо браузер не підтримує
localStorage. Отже, вам необхідно також надати і розширення cookieStorage.

Ви можете встановити пакет розширень так:

```
$ bower install angular-translate-storage-local
```

Тепер скажіть `$translateProvider`'у, що ви хочете використовувати його:

<pre>
$translateProvider.useLocalStorage();
</pre>

Це все. Тепер ваш застосунок використовує localStorage для того, щоб запам'ятовувати мову. Давайте
також оновимо на застосунок для використання localStorage:


<doc:example module="myApp">
  <doc:source>
    <script>
      var translationsEN = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
        PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
        PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'German',
        BUTTON_LANG_EN: 'English'
      };

      var translationsDE= {
        HEADLINE: 'Was für ein großartiges Modul!',
        PARAGRAPH: 'Ernsthaft!',
        PASSED_AS_TEXT: 'Hey! Ich wurde als text übergeben!',
        PASSED_AS_ATTRIBUTE: 'Ich wurde als Attribut übergeben, cool oder?',
        PASSED_AS_INTERPOLATION: 'Anfänger! Ich bin interpoliert!',
        VARIABLE_REPLACEMENT: 'Hi {{name}}',
        BUTTON_LANG_DE: 'Deutsch',
        BUTTON_LANG_EN: 'Englisch'
      };

      var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation tables
        $translateProvider.translations('en', translationsEN);
        $translateProvider.translations('de', translationsDE);
        $translateProvider.preferredLanguage('en');
        // remember language
        $translateProvider.useLocalStorage();
      }]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>

      <button ng-click="changeLanguage('de')" translate="BUTTON_LANG_DE"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>
    </div>
  </doc:source>
</doc:example>

Змініть мову і оновіть браузер! Тепер наш застосунок повинен запам'ятовувати останню використану
мову!

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
