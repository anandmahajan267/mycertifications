@ngdoc overview
@name Сервіс $translate
@description

# Сервіс $translate

`angular-translate` надає кілька варіантів перекладу контента вашого застосунку. Одним із них є
безпосереднє використання сервісу `$translate`, що надається. Скоріше за все, ви не будете 
користуватися цим підходом, бо він сильно прив'язує контролери і сервіси вашого застосунку до
контенту, що перекладається. Проте виявилося, що є випадки, коли може знадобитися можливість 
перекладу контенту з допомогою сервісу `$translate`.

Просто уявіть випадок, що вам необхідно перекласти вміст тегу `<title>` у вашому HTML документі.
`<title>` ніколи не буде знаходитися всередині директиви `ng-app`, а це значить, що він знаходиться
за межами світу Angular. Тоді, для вирішення  цієї задачі вам необхідно змінити заголовок застосунку
у коді контролеру або сервісу.

### Використання
Тут вам допоможе сервіс `$translate`. Використовувати цей сервіс дуже просто. Перш за все, треба
впровадити його з допомогою впровадження залежностей (як і будь-який інший сервіс, який ви хочете
використовувати у вашому Angular коді). Припустимо, що ми хочемо розширити застосунок, створений у
розділі [Початок роботи](#/guide/02_getting-started).

Наш код буде виглядати приблизно так:

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

Тепер, щоб перекласти контент з допомогою сервісу `$translate`, вам необхідно передати раніше 
зареєстрований з допомогою `$translateProvider` ідентифікатор перекладу. Оскільки можливо, що в
момент виклику сервісу відбувається асинхронне завантаження даних (ми поговоримо про це пізніше),
сервіс `$translate` теж поводиться асинхронно і повертає обіцянку (promise), що або вирішується
(resolve) з перекладом даного ідентифікатора перекладу, або відхиляється (reject) з ідентифікатором
перекладу. Таким чином базове використання сервісу `$translate` на рівні контролера (чи сервісу)
виглядає так:

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate('HEADLINE').then(function (headline) {
   $scope.headline = headline;
  });
  $translate('PARAGRAPH').then(function (paragraph) {
    $scope.paragraph = paragraph;
  });
  $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
    $scope.namespaced_paragraph = anotherOne;
  });
}]);
</pre>

**Увага:** Переклади у просторах імен доступні як JSON властивості (див. 'NAMESPACE.PARAGRAPH').

Це все. Тепер, для перекладу вмісту `<title>` ви можете скористуватися цим контролером.

## Декілька ідентифікаторів перекладу
Сервіс перекладу дозволяє перекладати кілька ідентифікаторів одразу.

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate(['HEADLINE', 'PARAGRAPH', 'NAMESPACE.PARAGRAPH']).then(function (translations) {
    $scope.headline = translations.HEADLINE;
    $scope.paragraph = translations.PARAGRAPH;
    $scope.namespaced_paragraph = translations['NAMESPACE.PARAGRAPH'];
  });
}]);
</pre>

Однак, сервіс завжди буде повертати об'єкт з перекладами -- навіть якщо перекласти ідентифікатор
(або ідентифікатори) не вдалося. Запросивши кілька перекладів за один раз ви повинні самі обробити
отриманий результат.

## Інформація про версію бібліотеки angular-translate
Ми надаємо зручну функцію для отримання інформації про версію встановленої бібліотеки, адже це може
бути корисним для якого-небудь розділу про ваш застосунок.

Просто викличте її ось так:
<pre>
  $translate.versionInfo();
  // returns e.g. "2.1.0"
</pre>

## Майте на увазі

Будь ласка, майте на увазі, що сервіс `$translate` за замовчуванням не надає двостороннього
зв'язування даних! Сервіс `$translate` працює асинхронно. Це означає, що він повертає переклад для
даного ідентифікатора перекладу як тільки він буде у змозі його визначити. Якщо перекладу не існує,
він напевно просто поверне ідентифікатор перекладу.

Тим не менше, це не означає, що він знає про зміну мови. Тому, переклади виконані за допомогою
прямого виклику `$translate` не оновлюються при зміні мови під час виконання.

Ви можете виправити це просто обгорнувши ваш виклик сервісу `$translate` у `$translateChangeSuccess`
колбек `$rootScope`а. Він викликається кожного разу, коли зміна мови пройшла успішно. Як тільки вона
зміниться, ви легко можете повторно виконати код, що відповідає за необхідні вам переклади.

Ось як це виглядає:

<pre>
app.controller('Ctrl', ['$scope', '$translate', '$rootScope', function ($scope, $translate, $rootScope) {
  $rootScope.$on('$translateChangeSuccess', function () {
    $translate('HEADLINE').then(function (translation) {
      $scope.headline = translation;
    });
  });
}]);
</pre>

Ви здивовані чому `$rootScope`, а не просто `$scope`? angular-translate породжує події тільки на
рівні `$rootScope` виходячи з міркувань продуктивності.
Докладніше дивіться в цьому пості на [StackOverflow](http://stackoverflow.com/a/19498009/288703).

Ось працюючий приклад:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
        // expose translation via `$translate` service
        $translate('HEADLINE').then(function (headline) {
          $scope.headline = headline;
        });
        $translate('PARAGRAPH').then(function (paragraph) {
          $scope.paragraph = paragraph;
        });
        $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
          $scope.namespaced_paragraph = anotherOne;
        });
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{headline}}</h1>
      <p>{{paragraph}}</p>
      <p>{{namespaced_paragraph}}</p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
