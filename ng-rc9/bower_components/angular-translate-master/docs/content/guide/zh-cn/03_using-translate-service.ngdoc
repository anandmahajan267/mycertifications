@ngdoc overview
@name 使用 $translate 服务
@description

# 使用 $translate 服务

`angular-translate` 提供了多种方法来翻译你的应用程序中的内容。
一种方式是直接使用所提供的 `$translate` 服务。实际上，你不会使用这种方法，因为你不想将您的翻译内容太过紧密的绑定在您的应用程序控制器和服务上。
然而事实证明，确实有你需要用 `$translate` 服务来翻译的内容的情况。

想象一个情况下，如果要翻译HTML文件的 `<title>` 标签. `<title>` 永远也不会再你的 `ng-app` 指令里, 这意味着它始终是在 Angular 的世界之外的。
所以，要能够实现这一点，一旦你的应用程序开始运行你就必须通过控制器或业务逻辑来操纵您的应用程序的标题。

## 一般用法

这就是 `$translate` 服务。 使用 `$translate` 服务非常简单。 首先，你必须每依赖注入它（就像每一个
你想在你的 Angular 代码里使用的服务一样）的服务。比方说，我们要扩展我们前面开发的应用程序[入门](#/guide/02_getting-started).

我们的代码看起来像这样：

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

现在，用`$translate` 服务来翻译你的内容，您需要做的就是传递你以前注册在 `$translateProvider` 中的翻译ID。
因为这有一些异步加载事件（我们以后还会再介入这个话题），`$translate` 服务也是异步行为并返回一个承诺，
要么获取给定翻译标识的翻译来解决这个承诺，或拒绝这个翻译的ID。所以 `$translate` 服务的基本用法是在控制器（或服务）的水平，看上去是这样的：

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate('HEADLINE').then(function (headline) {
    $scope.headline = headline;
  });
  $translate('PARAGRAPH').then(function (paragraph) {
    $scope.paragraph = paragraph;
  });
  $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
    $scope.namespaced_paragraph = anotherOne;
  });
}]);
</pre>

**注意:** 命名空间的翻译是作为JSON属性被访问的，请参阅 'NAMESPACE.PARAGRAPH'`.

这就是全部。当你想翻译`<TITLE>`的内容时，现在可以在您的控制器内这样做。

## 多个翻译标识 
翻译服务也意识到一次请求多个翻译的情况。

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate(['HEADLINE', 'PARAGRAPH', 'NAMESPACE.PARAGRAPH']).then(function (translations) {
    $scope.headline = translations.HEADLINE;
    $scope.paragraph = translations.PARAGRAPH;
    $scope.namespaced_paragraph = translations['NAMESPACE.PARAGRAPH'];
  });
}]);
</pre>

但是，该服务将始终返回一个包含翻译的对象 - 不管翻译（部分或者全部）是否失败了。当在一个要求l里请求多种翻译时，由你来决定如何处理结果。
 
## angular-translate 库版本信息 
因为在您的应用程序中显示“关于”信息是很有用，我们为您提供一个便利的函数来显示，或使用已安装的库版本信息。

Just call it this way:
<pre>
  $translate.versionInfo();
  // returns e.g. "2.1.0"
</pre>

## 谨记于心
请记住 `$translate` 翻译服务，不提供默认双向数据绑定！ `$translate` 服务以异步方式工作，这意味着
只要其能确定它就返回给定的翻译标识的翻译。如果翻译不存在，它很可能只是返回的翻译标识。

但是，这并不意味着当一个语言已经改变时它就会知道。在语言更新时，通过指令 `$translate` 命令执行后返回的翻译，没有得到更新。

您可以通过简单地包裹你的`$translate`成为一个`$translateChangeSuccess`来解决这个问题。
在`$rootScope`回调，每次翻译的变化成功时这个事件都会被触发。
一旦它的变化成功，你可以简单地重新执行该代码，这会提供您需要的翻译。

下面是它的代码:

<pre>
app.controller('Ctrl', ['$scope', '$translate', '$rootScope', function ($scope, $translate, $rootScope) {
  $rootScope.$on('$translateChangeSuccess', function () {
    $translate('HEADLINE').then(function (translation) {
      $scope.headline = translation;
    });
  });
}]);
</pre>

为什么要在 `$rootScope` 而不是 `$scope` 呢? 因为性能的原因 angular-translate 只在 `$rootScope` 层面上可以有`$emit`。

更多的信息参见 [StackOverflow](http://stackoverflow.com/a/19498009/288703) 帖子.

这是一个例子：

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!',
        NAMESPACE: {
          PARAGRAPH: 'And it comes with awesome features!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider
          .translations('en', translations)
          .preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
        // expose translation via `$translate` service
        $translate('HEADLINE').then(function (headline) {
          $scope.headline = headline;
        });
        $translate('PARAGRAPH').then(function (paragraph) {
          $scope.paragraph = paragraph;
        });
        $translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
          $scope.namespaced_paragraph = anotherOne;
        });
      }]);
    </script>
    <div ng-controller="Ctrl">
      <h1>{{headline}}</h1>
      <p>{{paragraph}}</p>
      <p>{{namespaced_paragraph}}</p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
