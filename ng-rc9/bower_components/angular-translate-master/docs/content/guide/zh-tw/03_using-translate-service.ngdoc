@ngdoc overview
@name 使用 $translate 服務
@description

# 使用 $translate 服務

`angular-translate` 提供了多種方法來翻譯你的應用程式中的內容。
一種方式是直接使用所提供的 `$translate` 服務。實際上，你不會使用這種方法，因為你不想將您的翻譯內容太過緊密的綁定在您的應用程式控制器和服務上。
然而事實證明，確實有你需要用 `$translate` 服務來翻譯的內容的情況。

想像一個情況下，如果要翻譯HTML檔的 `<title>` 標籤. `<title>` 永遠也不會再你的 `ng-app` 指令裡, 這意味著它始終是在 Angular 的世界之外的。
所以，要能夠實現這一點，一旦你的應用程式開始運行你就必須通過控制器或業務邏輯來操縱您的應用程式的標題。

## 一般用法

這就是 `$translate` 服務。 使用 `$translate` 服務非常簡單。 首先，你必須每依賴注入它（就像每一個
你想在你的 Angular 代碼裡使用的服務一樣）的服務。比方說，我們要擴展我們前面開發的應用程式[入門](#/guide/02_getting-started).

我們的代碼看起來像這樣：

<pre>
app.controller('Ctrl', ['$translate', function ($translate) {

}]);
</pre>

現在，用`$translate` 服務來翻譯你的內容，您需要做的就是傳遞你以前註冊在 `$translateProvider` 中的翻譯ID。
因為這有一些非同步載入事件（我們以後還會再介入這個話題），`$translate` 服務也是非同步行為並返回一個承諾，
要麼獲取給定翻譯標識的翻譯來解決這個承諾，或拒絕這個翻譯的ID。所以 `$translate` 服務的基本用法是在控制器（或服務）的水準，看上去是這樣的：

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
$translate('HEADLINE').then(function (headline) {
$scope.headline = headline;
});
$translate('PARAGRAPH').then(function (paragraph) {
$scope.paragraph = paragraph;
});
$translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
$scope.namespaced_paragraph = anotherOne;
});
}]);
</pre>

**注意:** 命名空間的翻譯是作為JSON屬性被訪問的，請參閱 'NAMESPACE.PARAGRAPH'`.

這就是全部。當你想翻譯`<TITLE>`的內容時，現在可以在您的控制器內這樣做。

## 多個翻譯標識
翻譯服務也意識到一次請求多個翻譯的情況。

<pre>
app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
  $translate(['HEADLINE', 'PARAGRAPH', 'NAMESPACE.PARAGRAPH']).then(function (translations) {
    $scope.headline = translations.HEADLINE;
    $scope.paragraph = translations.PARAGRAPH;
    $scope.namespaced_paragraph = translations['NAMESPACE.PARAGRAPH'];
  });
}]);
</pre>

但是，該服務將始​​終返回一個包含翻譯的對象- 不管翻譯（部分或者全部）是否失敗了。當在一個要求l裡請求多種翻譯時，由你來決定如何處理結果。
 
## angular-translate 庫版本信息
因為在您的應用程序中顯示“關於”信息是很有用，我們為​​您提供一個便利的函數來顯示，或使用已安裝的庫版本信息。

Just call it this way:
<pre>
  $translate.versionInfo();
  // returns e.g. "2.1.0"
</pre>

## 謹記于心
請記住 `$translate` 翻譯服務，不提供預設雙向資料繫結！ `$translate` 服務以非同步方式工作，這意味著
只要其能確定它就返回給定的翻譯標識的翻譯。如果翻譯不存在，它很可能只是返回的翻譯標識。

但是，這並不意味著當一個語言已經改變時它就會知道。在語言更新時，通過指令 `$translate` 命令執行後返回的翻譯，沒有得到更新。

您可以通過簡單地包裹你的`$translate`成為一個`$translateChangeSuccess`來解決這個問題。
在`$rootScope`回檔，每次翻譯的變化成功時這個事件都會被觸發。
一旦它的變化成功，你可以簡單地重新執行該代碼，這會提供您需要的翻譯。

下面是它的代碼:

<pre>
app.controller('Ctrl', ['$scope', '$translate', '$rootScope', function ($scope, $translate, $rootScope) {
$rooScope.$on('$translateChangeSuccess', function () {
$translate('HEADLINE').then(function (translation) {
$scope.headline = translation;
});
});
}]);
</pre>

為什麼要在 `$rootScope` 而不是 `$scope` 呢? 因為性能的原因 angular-translate 只在 `$rootScope` 層面上可以有`$emit`。

更多的資訊參見 [StackOverflow](HTTP://stackoverflow.com/a/19498009/288703) 帖子.

這是一個例子：

<doc:example module="myApp">
<doc:source>
<script>
var translations = {
HEADLINE: 'What an awesome module!',
PARAGRAPH: 'Srsly!',
NAMESPACE: {
PARAGRAPH: 'And it comes with awesome features!'
}
};

var app = angular.module('myApp', ['pascalprecht.translate']);

app.config(['$translateProvider', function ($translateProvider) {
// add translation table
$translateProvider
.translations('en', translations)
.preferredLanguage('en');
}]);

app.controller('Ctrl', ['$scope', '$translate', function ($scope, $translate) {
// expose translation via `$translate` service
$translate('HEADLINE').then(function (headline) {
$scope.headline = headline;
});
$translate('PARAGRAPH').then(function (paragraph) {
$scope.paragraph = paragraph;
});
$translate('NAMESPACE.PARAGRAPH').then(function (anotherOne) {
$scope.namespaced_paragraph = anotherOne;
});
}]);
</script>
<div ng-controller="Ctrl">
<h1>{{headline}}</h1>
<p>{{paragraph}}</p>
<p>{{namespaced_paragraph}}</p>
</div>
</doc:source>
</doc:example>

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](HTTP://github.com/PascalPrecht)</center>

