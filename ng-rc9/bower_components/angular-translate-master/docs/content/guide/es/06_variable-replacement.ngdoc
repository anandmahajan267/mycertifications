@ngdoc overview
@name Sustitución de variables
@description

# Sustitución de variables

Esta guía le eseñará sobre el reemplazo de variables dentro de una traducción.
Si aún no ha leído las guías introductorias acerca del
[servicio $translate](#/guide/03_using-translate-service),
el [filtro translate](#/guide/04_using-translate-filter) y la
[directiva translate](#/guide/05_using-translate-directive), le recomendamos que lo haga.

Está bueno usar el servicio `$translate`, el filtro `translate` y la directiva `translate`,
pero ¿qué pasa su sus traducciones necesitan valores variables? Digamos que usted necesita
mostrar un mensaje que diga "_Se han recibido n mensajes_" en donde _n_ es simplemente un
parámetro a sustituir por una variable que puede ser cualquier número.

Pues bien, de nuevo angular-translate se encarga del asunto. Adosar valores variables a
las traducciones usando los servicios de interpolación por defecto de `angular-translate` es bastante
sencillo. Sí, escuchó bien: el manejo de variables en las traducciones depende del servicio de
interpolación.

## Uso de valores variables en las traducciones

Cuando se usa el servicio de interpolación por defacto de `angular-translate`, se puede simplemente
  aprovechar la sintaxis de Angular. De manera que para definir una variable dentro de una
  traducción, simplemente hay que usar la directiva de interpolación de Angular


```
{
  "TRANSLATION_ID": "{{userName}} se conectó."
}
```


en donde `username` es el marcador a través del cual pasará la variable. Entonces, ¿cómo es posible
pasarles variables a los componentes que provee angular-translate?

## Reemplazo de variables en el servicio $translate

Se pueden pasar variables a través del servicio `$translate` utilizando su segundo argumento.
Como segundo parámetro, el servicio  `$translate` espera un objeto hash de Javascript, contra el cual
se interpola la traducción. De modo que, si tenemos una traducción como la descrita arriba, para pasarle valores de
`username` tendríamos que hacer lo siguiente:
<pre>
$translate('TRANSLATION_ID', { userNameUsuario: 'PascalPrecht' });
</pre>

Si hay una clave de traducción que requiera más de un valor, simplemente extienda el objeto hash que se
pasa, con los pares clave-valor correspondientes.

<pre>
$translate('TRANSLATION_ID, {
  userName: 'PascalPrecht',
  ultimaConexion: '2013-07-21 6:50PM'
});
</pre>

## Reemplazo de variables en un filtro translate

Como el filtro `translate` usa internamente el servicio `translate`, simplemente necesitamos
una forma de pasarle valores dinámicos al filtro, de manera de ponerlo a disposición del servicio
como un objeto hash. Para lograr esto se requiere una sintaxis especial, porque hasta el momento los filtros en
 Angular son incapaces de tener parámetros nombrados. De modo que hay dos maneras de pasar parámetros
 a través del filtro `translate`:

 La primera es pasar un objeto en formato literal de string, el cual luego será interpolado por el servicio
 `$translate`.

<pre>
{{ 'TRANSLATION_ID' | translate:'{ userName: "PascalPrecht" }' }}
</pre>

No es muy difícil ¿verdad? Pero ese `username` ¿no debería tener un valor constante, y a su vez ser interpolado
 antes de ser pasado? La única manera de hacer esto, es pasar un objeto scope como expresión Angular, a través del
 filtro. Lo cual a su vez significa, que usted debe vincular los valores de variable para las traducciones en el
 controlador que expone dichas variables en el scope.

<pre>
angular.module('myApp').controller('Ctrl', ['$scope', function ($scope) {

  $scope.translationData = {
    userName: 'PascalPrecht'
  };
}]);
</pre>

y recién después pasarlos como expresión a través del filtro:

<pre>
{{ 'TRANSLATION_ID' | translate: translationData }}
</pre>

## Reemplazo de variables en la directiva translate

Por supuesto, se puede lograr lo mismo con la directiva `translate`. La directiva `translate` espera un parámetro
opcional `translate-values`, mediante el cual se puede pasar parámetros. Todo lo que hay que hacer es combinar la
directiva con el atributo `translate-values`.

Se puede pasar un objeto como string literal, una expresión, o, si el valor es dinámico, una directiva de
interpolación. Lo que sea que pase, al final es evaluado e interpretado por el filtro `translate`, de manera que lo que
sale es un viejo y querido objeto Javascript, el cual a su vez le es pasado al servicio `$translate`.


<pre>
<ANY translate="TRANSLATION_ID"
     translate-values='{ userName: "PascalPrect"}'></ANY>
</pre>

o bien

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values="{ userName: someScopeObject.userName }"></ANY>
</pre>

o bien

<pre>
<ANY translate="TRANSLATION_ID"
     translate-values="{{translationData}}"></ANY>
</pre>

## Atributos personalizados (custom) para valores de traducción

A partir de la versión `2.0`, la directiva `translate` viene con otra útil funcionalidad para pasarles valores
a sus traducciones. Recién aprendimos cómo usar el atributo `translate-values`, lo cual está bien, pero ¿y si
quisiéramos a veces ser un poco más declarativos en nuestro código? Por ejemplo, ¿si quisiéramos pasar uno o dos valores
pero declararlos explícitamente en nuestro código HTML?

Bueno, en tal caso, en angular-translate `>=2.0` se puede hacer esto tal cual. Es decir, usted es capaz de
 definir sus propios atributos `translate-value-*`.

¿Cómo funciona esto? ¡Pan comido!

Supongamos que tenemos la siguiente clave de traducción:

<pre>
{
  "SALUDO": "Hola, me llamo {{name}}"
}
</pre>

Y queremos traducirla mediante la impresionante directiva `translate`. Podemos hacerlo, pero
 esta vez usaremos un atributo personalizado `translate-value-*` para pasar el valor. Así que haríamos lo siguiente:

<pre>
<p translate="SALUDO" translate-value-name="Pascal"></p>
</pre>

Todo lo que hay que hacer, es usar el prefijo `translate-value-` y agregar el nombre del identificador de la
 directiva de interpolación dentro de la traducción (en este ejemplo en particular, `name`).

Ah, por supuesto, también se puede usar con valores interpolados:

<pre>
<p translate="SALUDO" translate-value-name="{{name}}"></p>
</pre>

Si esta no es una funcionalidad "cool", entonces ninguna lo es.

¡Impresionante! ¡Ahora podemos reemplazar valores de variables dentro de nuestras traducciones! Actualicemos nuestra aplicación de ejemplo. Extendamos la tabla de traducciones de esta manera:

<pre>
var translations = {
  HEADLINE: '¡Qué módulo asombroso!',
  PARAGRAPH: '¡En serio!',
  PASSED_AS_TEXT: 'Hola, me están pasando como un texto',
  PASSED_AS_ATTRIBUTE: 'Me están pasando como atributo, ¡qué bueno!',
  PASSED_AS_INTERPOLATION: '¡Aprendices! A mí me están interpolando ...'
  VARIABLE_REPLACEMENT: 'Hola, {{name}}'
};
</pre>

Seguidamente, pasemos un nombre mediante la directiva `translate`:

<pre>
<p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht' }"></p>
</pre>

Y nuestro código en funcionamiento, ahora se ve así:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: '¡Qué módulo asombroso!',
        PARAGRAPH: '¡En serio!',
        PASSED_AS_TEXT: 'Hola, me están pasando como un texto',
        PASSED_AS_ATTRIBUTE: 'Me están pasando como atributo, ¡qué bueno!',
        PASSED_AS_INTERPOLATION: '¡Aprendices! A mí me están interpolando ...',
        VARIABLE_REPLACEMENT: 'Hola, {{name}}'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // agregar la tabla de traducción
        $translateProvider
          .translations('es', translations)
          .preferredLanguage('es');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>

      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht'}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-value-name="PascalPrecht"></p>
    </div>
  </doc:source>
</doc:example>

<br>
<hr>
<center>Hecho con &hearts; de unicornio y con amor por [PascalPrecht](http://github.com/PascalPrecht)</center>
