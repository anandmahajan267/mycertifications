@ngdoc overview
@name Almacenamientos
@description

# Almacenamientos (storages)

Hemos aprendido mucho sobre angular-translate en los capítulos reciente. Sabemos cómo podemos
[dinamizar nuestras traducciones](#/guide/06_variable-replacement). También aprendimos
[cómo agregar más de un lenguaje](#/guide/07_multi-language). Pero hay algo que aún nos parece un despropósito cuando abrimos nuestra aplicación de web: cada vez que empezamos, tenemos que cliquear en ese botón de 'alemán' una y otra vez (por supuesto, sólo si usted es alemán, como yo).

Así que el problema es que nuestra aplicación no puede recordar qué lenguaje usted había elegido la última vez que la usó. En este capítulo cubrimmos cómo enseñarle a su aplicación a recordar dicha elección.

## Haga que su aplicación recuerde su elección

Para hacer que su aplicación recuerde el lenguaje que los usuarios elijan, angular-translate viene con soporte para **storages** (almacenamientos). Cualquiera sea el almacenamiento que usted use, angular-translare grabará ahí una clave de lenguaje con un identificador específico, de manera que podamos pedirlo la próxima vez que ejecutemos la aplicación.

angular-translate viene con soporte incorporado para dos tipos de almacenamiento: **localStorage** y
**cookieStorage**. localStorage se retrotrae a  cookieStorage  si no es soportado por el navegador que usted esté usando. Para usar cualquiera de estos almacenamientos, se debe instalar el paquete de extensión correspondiente.

También recuerde incluir el archivo ngular-cookies.min.js en su HTML, y agregar 'ngCookies' como dependencia.

```js
var module = angular.module('AppService', ['pascalprecht.translate','ngCookies']);
```

## Uso de cookieStorage

Si quiere usar cookieStorage para almacenar el lenguaje a lo largo de distintas sesiones de navegador o requests http, simplemente isntale la extensión cookie storage via bower:

```
$ bower install angular-translate-storage-cookie
```

y luego asegúrese de embeberla en su documento HTML. Una vez embebida, se puede usar el método `useCookieStorage()` de `$translateProvider`, y angular-translate se hace cargo del resto.

<pre>
$translateProvider.useCookieStorage();
</pre>

¿No es fácil? Ahora angular-translate almacenará la clave de lenguaje inisial en ese "storage", y la irá actualizando según corresponda, según el usario vaya cambiando el lenguaje.

## Uso de localStorage

Si, por ciertas razones válidas, usted no quiere usar cookieStorage, puede usar localStorage para obtener los mismos resultados. El procedimiento es el mismo: instale el paquete de extensión correspondiente, indíquele al `$translateProvider` que use
localStorage via `useLocalStorage()`, y, de nuevo, angular-translate se encarga del resto.

De nuevo, recuerde que localStorage usa cookieStorage como respaldo, si el navegador no soporta localStorage. Así que usted necesita proveer la extensión cookieStorage también.

El paquete de extensión se puede instalar así:

```
$ bower install angular-translate-storage-local
```

Y ahora, infórmele a `$translateProvider` que lo quiere usar:

<pre>
$translateProvider.useLocalStorage();
</pre>

Y listo. Su aplicación ahora usará localStorage para recordar el lenguaje del usuario. Actualicemos nuestra aplicación para que use localStorage:


<doc:example module="myApp">
  <doc:source>
    <script>
		var translationsEN = {
		  HEADLINE: 'What an awesome module!',
		  PARAGRAPH: 'Srsly!',
		  PASSED_AS_TEXT: 'Hey there! I\'m passed as text value!',
		  PASSED_AS_ATTRIBUTE: 'I\'m passed as attribute value, cool ha?',
		  PASSED_AS_INTERPOLATION: 'Beginners! I\'m interpolated!',
		  VARIABLE_REPLACEMENT: 'Hi {{name}}',
		  BUTTON_LANG_ES: 'Spanish',
		  BUTTON_LANG_EN: 'English'
		};

		var translationsES= {
		  HEADLINE: '¡Qué módulo asombroso!',
		  PARAGRAPH: '¡En serio!',
		  PASSED_AS_TEXT: 'Hola, me están pasando como un texto',
		  PASSED_AS_ATTRIBUTE: 'Me están pasando como atributo, ¡qué bueno!',
		  PASSED_AS_INTERPOLATION: '¡Aprendices! A mí me están interpolando ...',
		  VARIABLE_REPLACEMENT: 'Hola {{name}}',
		  BUTTON_LANG_ES: 'Español',
		  BUTTON_LANG_EN: 'Inglés'
		};

		var app = angular.module('myApp', ['ngCookies', 'pascalprecht.translate']);

		app.config(['$translateProvider', function ($translateProvider) {
		  // agregar las tablas de traducción
		  $translateProvider.translations('en', translationsEN);
		  $translateProvider.translations('es', translationsES);
		  $translateProvider.preferredLanguage('en');
		  // recordar el idioma
		  $translateProvider.useLocalStorage();
		}]);

      app.controller('Ctrl', ['$translate', '$scope', function ($translate, $scope) {

        $scope.changeLanguage = function (langKey) {
          $translate.use(langKey);
        };
      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>
      
      <p translate>PASSED_AS_TEXT</p>
      <p translate="PASSED_AS_ATTRIBUTE"></p>
      <p translate>{{ 'PASSED_AS_INTERPOLATION' }}</p>
      <p translate="{{ 'PASSED_AS_INTERPOLATION' }}"></p>
      <p translate="VARIABLE_REPLACEMENT" translate-values="{ name: 'PascalPrecht'}"></p>
      
      <button ng-click="changeLanguage('es')" translate="BUTTON_LANG_ES"></button>
      <button ng-click="changeLanguage('en')" translate="BUTTON_LANG_EN"></button>      
    </div>
  </doc:source>
</doc:example>

Ahora, ¡cambie el lenguaje y refresque el navegador! Nuestra aplicación debería recordar el último lenguaje usado.

<br>
<hr>
<center>Hecho con &hearts; de unicornio y con amor por [PascalPrecht](http://github.com/PascalPrecht)</center>
