@ngdoc overview
@name Comienzo
@description

# Comienzo

## Configure su HTML
Para comenzar, embeba angular-translate en su documento HTML. Y, desde luego, esto debería ocurrir **después** de que 
 Angular mismo sea embebido. Su HTML debería verse así:

<pre>
<html>
  <head>
    <meta charset="utf-8">
    <title>i18n app</title>

    <script src="path/to/angular.js"></script>
    <script src="path/to/angular-translate.js"></script>
    <script src="app.js"></script>
  </head>

  <body ng-app="myApp">

  </body>
</html>
</pre>

## Declare dependencias

Una vez hecho esto, puede declarar angular-translate como dependencia de su aplicación. 
Angular provee inyección de dependencias, lo cual es fabuloso. Así que dígale a su apicación que necesita angular-translate para funcionar correctamente, simplemente inyecte
angular-translate como dependencia en su módulo como se muestra en el código a continuación. Esto le da acceso a todos los componentes con los que viene angular-translate.

<pre>
var app = angular.module('myApp', ['pascalprecht.translate']);
</pre>

## Presentando al `$translateProvider`

angular-translate ahora es una dependencia declarada, lo que significa que ahora tenemos acceso a todos sus componentes. Angular sigue una arquitectura bastante simple en lo 
referente a configuración de los diferentes servicios que, más tarde, usted querrá usar en su aplicación. Simplemente échele un vistazo al código siguiente.

Con toda seguridad, usted ya habrá hecho algo parecido:

<pre>
app.config(function ($locationProvider) {
  $locationProvider.html5Mode(true);
});
</pre>


O, tal vez, la configuración del servicio `$route`:

<pre>
app.config(function ($routeProvider) {
  $routeProvider.when('/algoPasa', {
    templateUrl: 'url/al/template',
    controller: 'UnControladorCualquiera'
  });
});
</pre>

Entonces, lo que en realidad está ocurriendo aquí, no es el _uso_ de un servicio determinado para configurar cosas. Es más bien la _configuración_ de un cierto servicio, usando 
un _proveedor_ (provider), el cual resulta ser usado más tarde en su aplicaión.
Esto significa que `$locationProvider.html5Mode(true)` configura el **servicio**  `$location` para trabajar en modo html5. Así que, si un servicio
necesita ser configurado externamente, un proveedor debe proveerle la interfaz necesaria.

angular-translate viene con un `$translateProvider` que se puede usar para configurar el servicio `$translate` provisto. El servicio`$translate` es usado por las 
directivas y filtros que se utilizan a lo largo y a lo ancho de su aplicación. 

Para habilitar al servicio `$translate` para que traduzca sus contenidos, tiene que saber 
qué traducciones están disponibles. 
Aquí es donde interviene el `$translateProvider`. `$translateProvider` provee métodos que le enseñan diferentes lenguajes a su aplicación, y permite que el  servicio 
`$translate` haga uso de ellos.

## Cómo eseñarle un lenguaje a su aplicación

Enseñarle un lenguaje a su aplicación con `$translateProvider` es muy fácil. Primero, se debe inyectar el proveedor en la función de configuración de su módulo (que es el único lugar
en donde se puede acceder a él).

<pre>
app.config(['$translateProvider', function($translateProvider) {

}]);
</pre>

Ahora, para agregar un lenguaje, tiene que hacerle saber a `$translateProvider` acerca de alguna **tabla de traducción**. ¿Qué significa esto? En realidad, es muy simple.
angular-translate espera tablas de traducción como objetos JSON. Así que todo lo hay que hacer, es representar sus datos de traducción como objetos "hash" de Javascript, 
o, si se los carga remotamente, como objetos JSON. Así es como se vería una tabla de traducción:

```json
{
  "TRANSLATION_ID": "Una traducción en concreto, para un lenguaje en particular."
}
```

¿No es fácil? Esta tabla de traducción contiene sólo 1 traducción. Como se puede ver, la clave representa un "ID" o "clave de traducción", mientras que el valor representa
la tradución en sí, para un lenguaje determinado. Ni siquiera hace falta proveer información acerca de a qué lenguaje corresponde, pero trataremos eso más adelante.

También se puede organizar traducciones incluyéndolas dentro de "namespaces". Esto es particularmente útil para grandes sitios de web y páginas largas. Todo lo que hay que hacer, es 
crear objetos JSON anidados:

```json
{
  "NAMESPACE": {
    "SUB_NAMESPACE": {
       "OTRA_TRANSLATION_ID": "Esta es una traducción con namespace."
    }
  }
}
```
Esta tabla de traducción contiene sólo una, pero se puede extender muy fácilmente. Se puede tener varios niveles de anidamiento en su tabla de traducción, y cada "namespace" puede 
contener tantos "sub-namespaces" como se desee, haciéndolo realmente flexible.

## Atájos y vínculos (Shortcuts and links)
Una funcionalidad muy útil, disponible desde `1.1.1`, es el uso de Atajos y Vínculos. Supongamos que tiene una tabla de traducción como la siguiente:

```json
{
  "bar": {
    "foo": {
      "foo": "Acá está mi texto"
    }
  }
}
```

Se podría acceder a la traducción mediante la clave `bar.foo.foo`, lo cual está bien, pero puede estar mejor aún: angular-translate es lo suficientemente inteligente como para 
reconocer que una clave tiene el mismo identificador que el "namespace" correspondiente. En tal caso, se puede acceder a la traducción refiriéndose simplemente al namespace, sin la
clave. Esto se puede hacer porque sólo hay una clave posible con el mismo valor que el namespace.

Así que se podría acceder a la traducción anterior, simplemente con el atajo `bar.foo`. Genial ¿no?

Otra interesante funcionalidad que provee angular-translate, es la capacidad de vincular una tabla de traducción con otra. Supongamos que tenemos la 
siguiente tabla:

```json
{
  "UN_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "OTRO_NAMESPACE": {
    "OK_TEXT": "OK"
  }
}
```

Como se puede ver, introdujimos dos namespaces aquí, y ambos necesitan un texto que diga "OK, lo cual no es inusual si se piensa en botones de confirmación o 
funcionalidades siilares en su aplicación. Sin embargo, aquí hay redundancia ¿no?

Si hay una traducción que siempre va a tener el mismo texto que otra, se puede simplemente vincularse con aquella. Para vincularse con otra clave de traducción, hay que prefijarla con 
una arroba y dos puntos `@:`, seguidos por la clave de traducción con la que se quiere vincular, namespace incluido. Así que el ejemplo anterior pordría verse así:


```json
{
  "UN_NAMESPACE": {
    "OK_TEXT": "OK"
  },
  "OTRO_NAMESPACE": {
    "OK_TEXT": "@:UN_NAMESPACE.OK_TEXT"
  }
}
```

## Y ... ¡Acción!

Agreguemos una tabla de traducción a nuestra aplicación. `$translateProvider` provee un método llamado `translations()`, el cual se encargad de eso.
Supongamos que tenemos una tabla de traducción como esta:

<pre>
var translations = {
  HEADLINE: '¡Qué módulo asombroso!',
  PARAGRAPH: '¡En serio!',
  NAMESPACE: {
    PARAGRAPH: '¡Y viene con funcionalidades extraordinarias!'
  }
};
</pre>

Podemos agregarla con  `$translateProvider.translations()`:

<pre>
app.config(['$translateProvider', function ($translateProvider) {
  // agregar la tabla de traducción
  $translateProvider
    .translations('es', translations)
    .preferredLanguage('es');
}]);
</pre>

Y esto es básicamente todo lo que hay que hacer. Simplemente especificar un lenguaje y agregar una tabla de traducción para él. Luego de eso, decirle a angular-translate 
cuál es el lenguaje preferido. Como se está agregando un lenguaje durante la configuración, el servicio `$translate` puede acceder a él, una vez que 
ha sido instanciado y usado. Este es el código en funcionamiento:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: '¡Qué módulo asombroso!',
        PARAGRAPH: '¡En serio!',
        NAMESPACE: {
          PARAGRAPH: '¡Y viene con funcionalidades extraordinarias!'
        }
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
      // agregar la tabla de traducción
      $translateProvider
        .translations('es', translations)
        .preferredLanguage('es');
      }]);
    </script>
    <div>
      <h1>Todavía no se ve nada</h1>
      <p>Pero enseguida lo vamos a arreglar ...</p>
    </div>
  </doc:source>
</doc:example>

¡Ahora su aplicación está lista para ser "localizada"! En el próximo capítulo, aprenderá cómo usar la directiva y el filtro provistos por angular-translate, para interpolar sus traducciones.

<br>
<hr>
<center>Hecho con &hearts; de unicornio y con amor por [PascalPrecht](http://github.com/PascalPrecht)</center>
