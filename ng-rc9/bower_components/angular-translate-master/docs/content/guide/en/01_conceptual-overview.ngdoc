@ngdoc overview
@name Conceptual Overview
@description

# Conceptual Overview

The following figure shows in a little abstract way how angular-translate is
structured and how the different components it provides, are actually connected.

<img class="pull-right" style="padding-left: 3em;" src="img/guide/conceptual_overview.png">

## The nitty-gritty
As you can see, angular-translate provides a directive and a filter as components
you can use to translate your apps content. The directive appears on top of the
filter component because it makes use of it internally.

In the next layer it gets a bit more interesting. Both, the directive and the
filter use the `$translate` service. Which means, when translating contents of
your app with a directive, you're actually doing it with the filter, which actually
does it with the service. This also means that you can not only translate your
contents in the view layer in a declarative way, but also (of course only if
needed) in a business logic layer like a controller or another service.

Within the `$translate` service you can see some sub components which are used
by it to translate your contents. We'll get into this in a more detail later
but nevertheless its good to get an overview of what's actually happening there.

## Interpolators
The right box represents possible interpolation services `$translate` service uses
to interpolate your translations against variable values you might want to use
there. If you don't understand what this means, no worries. You'll learn everything
you need to know about interpolators later. However, interpolation services are
decoupled from the main core, which means, you can install them as extra packages.
There's a default interpolation service which ships with angular-translate built-in.

Interpolators influence the syntax you have to use within your translations. The
default interpolation service uses Angular's core interpolation service, so if
you familiar with it, you don't have to learn anything new. The **MessageFormat**
interpolation service uses a different syntax, but more on that later.

## Missing translation handlers
The left box shows provided missing translation handlers. These get executed when
`$translate` service tries to translate a key which doesn't exist. You
don't have to use any handler, but if you want to, angular-translate comes with
a logging service you can install as an extension. In addition to that, you can also
implement your own handler and use it.

## Asynchronous loader
Of course you want to be able to load your translation data asynchronously to
speed up your apps performance. angular-translate supports the use of so called
asynchronous loaders, which are very easy to use. There are two asynchronous
loaders, `urlLoader` and `staticFilesLoader`. Both of them solves a specific
situation when it comes to asynchonous loading of translation data. Anyways, of
course you can build your own custom loaders and use them if you want to.

## Storage
Since its pretty common that an app, which provides multi-language support, should
remember the language a user has chosen during runtime, angular-translate gives
you a way to use any kind of storage. It checks if it should rely on any storage and if so it tries to find a specific key - value pair within the configured storage
to determine which language actually should be loaded.

angular-translate comes with support for localStorage and cookieStorage. You can
easily install extension packages to make use of them.

Now you got a little overview on how angular-translate is structured, which kind
of features it provides and how the components are connected. In the next chapter
you'll learn how to start with angular-translate.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
