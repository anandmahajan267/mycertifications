@ngdoc overview
@name Using translate filter
@description

# Using translate filter

In [Using $translate service](#/guide/03_using-translate-service) you've learned
how to use `$translate` service to translate your contents with registered
translation IDs. Of course, it's pretty cool that this works, but you actually
don't want to bind your translation too hard to controllers or services. You mainly
want to translate your contents in the view layer because this is where it all
belongs to.

angular-translate provides a filter component with which you are able to translate
your translation IDs within the view layer, without letting any controller or
service know of them. This means you can decouple the translate logic from any
controller or service and make your view layer replaceable without touching
business logic code.

## General usage
Using a filter in Angular is pretty straight forward. You can read everything about
Angular filters right
[here](http://docs.angularjs.org/guide/dev_guide.templates.filters.using_filters).

The same goes for angular-translate's `translate` filter. We can update our
example from
[Using $translate service](#/guide/03_using-translate-service#generalusage)
just by transfering the controller logic to our view layer. Basically the
`translate` filter works like this:

```
<ANY>{{'TRANSLATION_ID' | translate}}</ANY>
```

So, to update our example, we remove the usage of `$translate` service within
our controller and add the logic to our view layer by using `translate` filter,
just like this:

<pre>
<h1>{{'HEADLINE' | translate}}</h1>
<p>{{'PARAGRAPH' | translate}}</p>
</pre>

Pretty easy, ha? And of course, you can view a working sample here:

<doc:example module="myApp">
  <doc:source>
    <script>
      var translations = {
        HEADLINE: 'What an awesome module!',
        PARAGRAPH: 'Srsly!'
      };

      var app = angular.module('myApp', ['pascalprecht.translate']);

      app.config(['$translateProvider', function ($translateProvider) {
        // add translation table
        $translateProvider.translations('en', translations);
        $translateProvider.preferredLanguage('en');
      }]);

      app.controller('Ctrl', ['$scope', function ($scope) {

      }]);
    </script>
    <div ng-controller="Ctrl">
      <p>{{ 'HEADLINE' | translate }}</p>
      <p>{{ 'PARAGRAPH' | translate }}</p>
    </div>
  </doc:source>
</doc:example>

Great! You're now able to translate your contents within the view layer without
polluting your controllers logic with translation logic. The whole translation
stuff is decoupled from your business logic and makes your app much more flexible
when it comes to a view layer replacement! The next chapter shows you how to
do the same with the provided `translate` directive.

<br>
<hr>
<center>Made with unicorn &hearts; love by [PascalPrecht](http://github.com/PascalPrecht)</center>
